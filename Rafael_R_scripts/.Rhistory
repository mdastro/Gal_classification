true.mu ~ dnorm(0,0.0001)
true.tau <- pow(sd.prior,-2)
sd.prior ~ dunif(0,100)
}"
model.result <- jags.model(textConnection(my.model),
data = list('x' = x,
'x.tau' = x.tau,
'N' = N),
n.chains = 4,
n.adapt = 100)
#update(model.result, 1000)
#test <- jags.samples(model.res, c('true.mu', 'true.tau'), 1000)
test <- coda.samples(model.result, variable.names=c("true.mu", "true.tau"), n.iter=1000)
print(summary(test))
test <- coda.samples(model.result, variable.names=c("true.x"), n.iter=1000)
print(summary(test))
summary(test)
plot(myfit)
my.fit <- fitdist(x,'norm',method='mle',weights=pesos)
print(summary(my.fit))
plot(myfit)
#
rave <- read.table('/Users/Rafael/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Popstar_Rodolfo/data/cor_RAVE_DR4_selection_apr2015.dat',header=T)
#
x <- rave$U[rave$e_U <= 15]
N <- length(rave$U[rave$e_U <= 15])
x.sd <- rave$e_U[rave$e_U <= 15]
x.tau <- 1/(x.sd*x.sd)
#
pesos <- (1/(x.sd^2))/(min(1/(x.sd^2))) # Os pesos tem que ser numeros inteiros - usando entao o inverso da variancia normalizado pelo menor numero
pesos <- round(pesos,digits=0) # e arredondando
##################
#
# Maximum likelihood
#
my.fit <- fitdist(x,'norm',method='mle',weights=pesos)
print(summary(my.fit))
plot(myfit)
plot(my.fit)
my.fit <- fitdist(x,'norm',method='qme',weights=pesos)
print(summary(my.fit))
my.fit <- fitdist(x,'norm',method='qme')
print(summary(my.fit))
my.fit <- fitdist(x,'norm',method='mme',weights=pesos)
print(summary(my.fit))
my.fit <- fitdist(x,'norm',method='mme')
print(summary(my.fit))
test <- coda.samples(model.result, variable.names=c("true.mu", "true.tau"), n.iter=1000)
print(summary(test))
my.model <- "model{
for (i in 1:N) {
true.x[i] ~ dnorm(true.mu,true.tau) # O valor real de x vem de uma dist normal da qual quero estimar a media e o desvio padrao
x[i] ~ dnorm(true.x[i],x.tau[i])    # O valor observado vem de um valor real afetado pelo erro que eu conheco de acordo com uma dist. normal
}
true.mu ~ dnorm(0,0.0001)
true.tau <- pow(sd.prior,-2)
sd.prior ~ dunif(0,100)
true.sd <- 1/sqrt(true.tau)
}"
model.result <- jags.model(textConnection(my.model),
data = list('x' = x,
'x.tau' = x.tau,
'N' = N),
n.chains = 4,
n.adapt = 100)
#update(model.result, 1000)
#test <- jags.samples(model.res, c('true.mu', 'true.tau'), 1000)
test <- coda.samples(model.result, variable.names=c("true.mu", "true.sd"), n.iter=1000)
print(summary(test))
my.fit <- fitdist(x,'norm',method='mme')
print(summary(my.fit))
my.fit <- fitdist(x,'norm',method='mle',weights=pesos)
print(summary(my.fit))
pesos
x.sd
x.sd/x
hist(x.sd/x)
par(mar = c(1, 1, 1, 1), bg="violetred4")
circlize::chordDiagram(matrix(1, 20, 20),
col="white",
symmetric = TRUE,
transparency = 0.85,
annotationTrack = NULL)
(matrix(1, 20, 20)
)
circlize::chordDiagram(matrix(runif(1), 20, 20),
col="white",
symmetric = TRUE,
transparency = 0.85,
annotationTrack = NULL)
runif(1)
matrix(runif(1), 20, 20)
matrix(runif(20), 20, 20)
circlize::chordDiagram(matrix(runif(20), 20, 20),
col="white",
symmetric = TRUE,
transparency = 0.85,
annotationTrack = NULL)
circlize::chordDiagram(matrix(runif(20), 20, 20),
col="white",
symmetric = F,
transparency = 0.85,
annotationTrack = NULL)
circlize::chordDiagram(matrix(runif(20), 20, 20),
col="white",
symmetric = F,
transparency = 0.85,
annotationTrack = NULL)
circlize::chordDiagram(matrix(runif(20), 20, 20),
symmetric = F,
transparency = 0.85,
annotationTrack = NULL)
circlize::chordDiagram(matrix(runif(20), 20, 20),
symmetric = F,
transparency = 0.85,
annotationTrack = NULL)
circlize::chordDiagram(matrix(runif(20), 20, 20),
symmetric = F,
annotationTrack = NULL)
circlize::chordDiagram(matrix(rnorm(10), 10, 10),
symmetric = F,
annotationTrack = NULL)
matrix(rnorm(10), 10, 10)
circlize::chordDiagram(matrix(rpois(10), 10, 10),
symmetric = F,
annotationTrack = NULL)
circlize::chordDiagram(matrix(rpois(10,5), 10, 10),
symmetric = F,
annotationTrack = NULL)
circlize::chordDiagram(matrix(rpois(r,5), 10, 10),
symmetric = T,
annotationTrack = NULL)
circlize::chordDiagram(matrix(rpois(5,10), 10, 10),
symmetric = T,
annotationTrack = NULL)
matrix(rpois(5,10), 10, 10)
matrix(10, 10, 10)
circlize::chordDiagram(matrix(10, 10, 10),
symmetric = T,
annotationTrack = NULL)
circlize::chordDiagram(matrix(700, 10, 10),
symmetric = T,
annotationTrack = NULL)
circlize::chordDiagram(matrix(100, 100, 100),
symmetric = T,
annotationTrack = NULL)
circlize::chordDiagram(matrix(30, 30, 30),
symmetric = T,
annotationTrack = NULL)
matrix(30, 30, 30)
circlize::chordDiagram(matrix(42, 42, 42),
symmetric = T,
annotationTrack = NULL)
matrix(42, 42, 42)
scatter3D_fancy(x, y, z,  pch = 18,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
pch = c(".","*","+","-"),colkey=F,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy(x, y, z,  pch = 18,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
pch = c(".","*","+"),colkey=F,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
pch = c(".","*","+"),colkey=F,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
x <-  AGN_short[,3]
y <-  AGN_short[,1]
z <-  AGN_short[,2]
#gcol<-as.factor(CLUST$classification)
#library(plyr)
#gcol<-revalue(gcol, c("1"="#66c2a5", "2"="#fc8d62","3"="green"))
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 2, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 2, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,pch = ".",cex = 0.75)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(".",".",".","."),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(".","+",".","."),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=pch)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = pch,
cex = 2, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = pch,
cex = 2, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,pch = ".",cex = 0.75)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,18),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=pch)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = pch,
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = pch,
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,pch = ".",cex = 0.75)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,18),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=pch)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = pch,
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = pch,
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,pch = ".",cex = 1)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,18),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,23),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=pch)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,pch = ".",cex = 1)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,23),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=pch)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,pch = ".",cex = 1.25)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,23),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,pch = ".",cex = 1.5)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,23),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,pch = ".",cex = 1.25)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,23),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=pch)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,cex = 1.25,pch=pch)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,23),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=pch)
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,cex = 1.25,pch=pch)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,23),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,21),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
fill=c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,21),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c(16,17,21),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=c("+","o","."),
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
shapes <- revalue(CLUST$classification, c("1"="+", "2"="o","3"="."))
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=shapes,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
revalue(CLUST$classification, c("1"="+", "2"="o","3"="."))
shapes <- revalue(as.factor(CLUST$classification), c("1"="+", "2"="o","3"="."))
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=shapes,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
shapes <- revalue(as.factor(CLUST$classification), c("1"="+", "2"="*","3"="."))
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=shapes,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
as.factor(CLUST$classification)
shapes <- revalue(as.factor(CLUST$classification), c("1"=18, "2"=19,"3"=20))
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,pch=shapes,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=".")
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,cex = 1.25,pch=pch)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=".")
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,cex = 1.75,pch=pch)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=".")
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,cex = 2.75,pch=pch)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=".")
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,cex = 2.75,pch)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
scatter3D_fancy <- function(x, y, z,..., colvar = z,col=col,colkey=colkey,pch=".")
{
panelfirst <- function(pmat) {
XY <- trans3D(x, y, z = rep(min(z), length(z)), pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
XY <- trans3D(x = rep(min(x), length(x)), y, z, pmat = pmat)
scatter2D(XY$x, XY$y,col=col, colvar = colvar, pch = ".",
cex = 0.5, add = TRUE, colkey = FALSE)
}
scatter3D(x, y, z, ...,col=col, colvar = colvar, panel.first=panelfirst,
colkey = colkey,cex = 2.75,pch=pch)
}
scatter3D_fancy(x, y, z,colvar = as.integer(CLUST$classification),col = c("#D46A6A","#D4B16A","#764B8E"),
colkey=F,
box = T,ticktype = "detailed",theta=40,phi=20,
zlab = "LogOIII_Hb",ylab="LogNII_Ha", d=20,
xlab="EWHa",bty = "u",col.panel = "gray95",col.grid = "gray35",contour = T)
