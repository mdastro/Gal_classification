names(ell) <- c('yval', 'xval', 'classification')
data.frame(xvar = nms[coords[1]], yvar = nms[coords[2]], ell)
})
}
CL<-Mclust(iris[,1:4],G=2)
df.ellipses(CL)
require(ellipse)
install.packages("ellipse")
df.ellipses <- function(mclustobj){
require(ellipse)
require(plyr)
nms <- rownames(mclustobj$parameters$mean)
n <- length(nms)
grid <- expand.grid(x = 1:n, y = 1:n)
grid <- subset(grid, x < y)
grid <- cbind(grid[, 2], grid[, 1])
ldply(1:nrow(grid), function(i){
coords <- as.numeric(grid[i, ])
ell <- get.ellipses(c(nms[coords]), mclustobj)
names(ell) <- c('yval', 'xval', 'classification')
data.frame(xvar = nms[coords[1]], yvar = nms[coords[2]], ell)
})
}
CL<-Mclust(iris[,1:4],G=2)
df.ellipses(CL)
df.ellipses(CL)[1,]
CL<-Mclust(iris[,1:2],G=2)
df.ellipses(CL)[1,]
iris[1,]
df.ellipses(CL)[1:3,]
iris[1:3,1:2]
EL<-df.ellipses(CL)
xvalxval
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=xval,group=classification))
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_point(data=EL,aes(x=xval,y=xval,group=classification))
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_point(data=EL,aes(x=xval,y=yval,group=classification))
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=yval,group=classification)
)
CL$parameters$mean
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))+
stat_ellipse(aes(group=classification),type="norm")
iris$classification <-CL$classification
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))+
stat_ellipse(aes(group=classification),type="norm")
get.ellipses <- function(coords, mclust.fit){
centers <- mclust.fit$parameters$mean[coords, ]
vars <- mclust.fit$parameters$variance$sigma[coords, coords, ]
ldply(1:ncol(centers), function(cluster){
data.frame(ellipse(vars[,,cluster], centre = centers[, cluster],
level = 0.95), classification = cluster)
})
}
# Function to generate data frame for producing ellipses (DM)
df.ellipses <- function(mclustobj){
require(ellipse)
require(plyr)
nms <- rownames(mclustobj$parameters$mean)
n <- length(nms)
grid <- expand.grid(x = 1:n, y = 1:n)
grid <- subset(grid, x < y)
grid <- cbind(grid[, 2], grid[, 1])
ldply(1:nrow(grid), function(i){
coords <- as.numeric(grid[i, ])
ell <- get.ellipses(c(nms[coords]), mclustobj)
names(ell) <- c('yval', 'xval', 'classification')
data.frame(xvar = nms[coords[1]], yvar = nms[coords[2]], ell)
})
}
CL<-Mclust(iris[,1:2],G=2)
EL<-df.ellipses(CL)
iris$classification <-CL$classification
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))+
stat_ellipse(aes(group=classification),type="norm")
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))+
geom_polygon(data=EL,aes(x=xval,y=yval,group=classification,fill=classification)+
stat_ellipse(aes(group=classification),type="norm")
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))+
geom_polygon(data=EL,aes(x=xval,y=yval,group=classification,fill=classification)+
stat_ellipse(aes(group=classification),type="norm")
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))+
geom_polygon(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))+
stat_ellipse(aes(group=classification),type="norm")
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))+
geom_polygon(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))+
stat_ellipse(aes(group=classification),type="norm")
ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point()+
geom_path(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))+
geom_polygon(data=EL,aes(x=xval,y=yval,group=classification,fill=classification))
#----------------------------------------------------------------##----------------------------------------------------------------#
library(e1071);require(mclust);library(RColorBrewer);require(ggthemes);
require(ggpubr);require(ggplot2);require(plotly);require(MASS);require(cluster)
library(fpc);library(plyr);library(reshape);require(ggsci);require(plot3D);require(rgl)
#----------------------------------------------------------------##----------------------------------------------------------------#
#----------------------------------------------------------------##----------------------------------------------------------------#
# Read and store data
AGN<- read.table("/Users/rafael/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Gal_classification/Dataset/class_WHAN_BPT.dat",header=F)
colnames(AGN)<-c("id", "xx_BPT", "yy_BPT", "class_BPT", "xx_WHAN",
"yy_WHAN", "EW_NII_WHAN", "class_WHAN")
# Subsampling for testing, not necessary in the final run
#test_index <- sample(seq_len(nrow(AGN)),replace=F, size = 10000)
AGN_short <- AGN[,c("xx_BPT", "yy_BPT","yy_WHAN")]
rm(AGN)
#----------------------------------------------------------------##----------------------------------------------------------------#
#----------------------------------------------------------------##----------------------------------------------------------------#
#--Number of Clusters fixed----------------------------------------------------------------#
CLUST <- Mclust(AGN_short,G = 3,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
source(gg_ellipse)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Gal_classification/Rafael_R_scripts")
source(gg_ellipse)
source(gg_ellipse.R)
source("gg_ellipse")
source("gg_ellipse.R")
df.ellipses(CLUST )
EL<-df.ellipses(CLUST )
df.ellipses(CLUST )[1,]
El_BPT<-subset(EL,"xvar"=="yy_BPT" && "yvar"=="xx_BPT" )
El_BPT
subset(EL,"xvar"="yy_BPT" && "yvar"="xx_BPT")
subset(EL,"xvar"=="yy_BPT" && "yvar"=="xx_BPT")
subset(EL,"xvar"=="yy_BPT")
subset(EL,xvar=="yy_BPT" && yvar=="xx_BPT")
subset(EL,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT<-subset(EL,xvar=="yy_BPT" & yvar=="xx_BPT")
#----------------------------------------------------------------##----------------------------------------------------------------#
# Customized plots via ggplot2
gdata <- data.frame(x=AGN_short$xx_BPT,y=AGN_short$yy_BPT,z=AGN_short$yy_WHAN, type=as.factor(CLUST$classification))
#-----------------------
# BPT PLOT
#-----------------------
xx = seq(-4, 0.0, 0.01)
Ka = 0.61 / (xx - 0.05) + 1.30
gKa <- data.frame(xx,Ka)
#-----------------------
xx1 = seq(-4, 0.4, 0.01)
Ke = 0.61 / (xx1 - 0.47) + 1.19
gKe <- data.frame(xx1,Ke)
#-----------------------
xx2 = seq(-0.43, 5, 0.01)
Sey = 1.05 * xx2 + 0.45
gSey <- data.frame(xx2,Sey)
El_BPT[1,]
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification))+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.8,1.3),ylim=c(-1.5,1.55))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
source("gg_ellipse.R")
EL<-df.ellipses(CLUST,level=0.997)
El_BPT<-subset(EL,xvar=="yy_BPT" & yvar=="xx_BPT")
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification))+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.8,1.3),ylim=c(-1.5,1.55))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification))+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.8,1.3),ylim=c(-1.5,1.55))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,col=classification))+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.8,1.3),ylim=c(-1.5,1.55))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification))+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.8,1.3),ylim=c(-1.5,1.55))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
El_BPT$classification <-as.factor(El_BPT$classification)
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification))+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.8,1.3),ylim=c(-1.5,1.55))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
# BPT projection
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification))+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification,size=2))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
# BPT projection
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification,size=1.25))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification,size=1))+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
EL[1,]
EL[,]
El_WHAN<-subset(EL,xvar=="yy_WHAN" & yvar=="xx_BPT")
El_WHAN$classification <-as.factor(El_WHAN$classification)
ggplot(data=gdata,aes(x=x,y=z))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log EW (H', alpha, ')'))) +
stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3","#fb9a99"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_WHAN,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
coord_cartesian(xlim=c(-1.5,1.3),ylim=c(-1.1,2.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))+
geom_segment(aes(x = -0.4, y = 5, xend = -0.4, yend = 0.5),size=1.25,linetype="dashed",color="gray25")+
geom_hline(yintercept = 0.5,linetype="dashed",size=1.25,color="gray25")+
geom_segment(aes(x = -0.4, y = 0.78, xend = 2, yend = 0.78),linetype="dashed",size=1.25,color="gray25")
#----------------------------------------------------------------##----------------------------------------------------------------#
# WHAN projection
ggplot(data=gdata,aes(x=x,y=z))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log EW (H', alpha, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3","#fb9a99"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_WHAN,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
coord_cartesian(xlim=c(-1.5,1.3),ylim=c(-1.1,2.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))+
geom_segment(aes(x = -0.4, y = 5, xend = -0.4, yend = 0.5),size=1.25,linetype="dashed",color="gray25")+
geom_hline(yintercept = 0.5,linetype="dashed",size=1.25,color="gray25")+
geom_segment(aes(x = -0.4, y = 0.78, xend = 2, yend = 0.78),linetype="dashed",size=1.25,color="gray25")
#----------------------------------------------------------------##----------------------------------------------------------------#
ggplot(data=gdata,aes(x=x,y=z))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log EW (H', alpha, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type,shape=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3","#fb9a99"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_WHAN,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
coord_cartesian(xlim=c(-1.5,1.3),ylim=c(-1.1,2.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))+
geom_segment(aes(x = -0.4, y = 5, xend = -0.4, yend = 0.5),size=1.25,linetype="dashed",color="gray25")+
geom_hline(yintercept = 0.5,linetype="dashed",size=1.25,color="gray25")+
geom_segment(aes(x = -0.4, y = 0.78, xend = 2, yend = 0.78),linetype="dashed",size=1.25,color="gray25")
#----------------------------------------------------------------##-------------
ggplot(data=gdata,aes(x=x,y=z))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log EW (H', alpha, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type,shape=type),alpha=0.4,size=0.75)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3","#fb9a99"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_WHAN,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
coord_cartesian(xlim=c(-1.5,1.3),ylim=c(-1.1,2.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))+
geom_segment(aes(x = -0.4, y = 5, xend = -0.4, yend = 0.5),size=1.25,linetype="dashed",color="gray25")+
geom_hline(yintercept = 0.5,linetype="dashed",size=1.25,color="gray25")+
geom_segment(aes(x = -0.4, y = 0.78, xend = 2, yend = 0.78),linetype="dashed",size=1.25,color="gray25")
#----------------------------------------------------------------##----------------------------------------------------------------#
gdata[1,]
CLUST$z
which(CLUST$z<=1-0.997)
which(CLUST$z[,1]<=1-0.997)
which(CLUST$z[,1]<=1-0.997 & CLUST$z[,2]<=1-0.997 & CLUST$z[,3]<=1-0.997)
which(CLUST$z[,1]<=1 & CLUST$z[,2]<=1 & CLUST$z[,3]<=1)
which(CLUST$z[,1]<=0.1 & CLUST$z[,2]<=0.1 & CLUST$z[,3]<=0.1)
CLUST$z[1:50,]
which(CLUST$z[,1]<=0.6 & CLUST$z[,2]<=0.6 & CLUST$z[,3]<=0.6)
which(CLUST$z[,1]<=0.68 & CLUST$z[,2]<=0.68 & CLUST$z[,3]<=0.68)
CLUST <- Mclust(AGN_short,G = 3,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV",noise = T)#Initialization with 1000 for higher speed
CLUST$classification
summary(CLUST$classification)
is.na(CLUST$classification)
summary(is.na(CLUST$classification))
CLUST$z
range(CLUST$z)
MCIR<-clust(iris[1:4],G=2,noise=T)
CIR<-Mclust(iris[1:4],G=2,noise=T)
CIR
CIR$classification
CIR<-Mclust(iris[1:4],G=3,noise=T)
CIR$classification
CIR<-Mclust(iris[1:4],G=3,noise=F)
CIR$classification
mod4 = Mclust(iris[,1:4], prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
summary(mod4)
mod4 = Mclust(iris[,1:4], prior = priorControl(functionName="defaultPrior", shrinkage=0.7))
summary(mod4)
mod4$classification
mod4 = Mclust(iris[,1:4], prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
summary(mod4)
mod4$classification
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
stat_density2d(geom="tile", aes(fill = ..density..), contour = FALSE)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),alpha=0.4,size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
stat_density2d(geom="tile", aes(alpha = ..density..), contour = FALSE)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
