gc[1,]
as.data.frame(dat_r)[1,]
colnames(as.data.frame(dat_r))<-c("x","y")
all<-rbind(gc,dat_r)
plot(all)
dat_r
dat_r[1,]
colnames(as.data.frame(dat_r))<-c("x","y")
as.data.frame(dat_r)
dat_r<-as.data.frame(dat_r)
colnames(dat_r)<-c("x","y")
all<-rbind(gc,dat_r)
plot(all)
vtess <- deldir(all$x,all$y)
w <- tile.list(vtess)
plot(w, wlines="triang", wpoints="none", number=FALSE, add=TRUE, lty=1,
fillcol  =col,border=NULL,showpoints = F)
# signature
legend("topleft", legend = "© Rafael S. de Souza", bty = "n", text.col = "gray20",cex=1.25)
par(mar=c(0.1,0.1,0.1,0.1))
plot(w, wlines="triang", wpoints="none", number=FALSE, add=TRUE, lty=1,
fillcol  =col,border=NULL,showpoints = F)
# signature
legend("topleft", legend = "© Rafael S. de Souza", bty = "n", text.col = "gray20",cex=1.25)
op = par(bg = "gray95", mar = rep(0.1, 4))
plot(w, wlines="triang", wpoints="none", number=FALSE, add=TRUE, lty=1,
fillcol  =col,border=NULL,showpoints = F)
# signature
legend("topleft", legend = "© Rafael S. de Souza", bty = "n", text.col = "gray20",cex=1.25)
op = par(bg = "gray95", mar = rep(0.1, 4))
plot(w, wlines="triang", wpoints="none", number=FALSE, add=TRUE, lty=1,
fillcol  =col,border=NULL,showpoints = F)
# signature
legend("topleft", legend = "© Rafael S. de Souza", bty = "n", text.col = "gray20",cex=1.25)
op = par(bg = "gray95", mar = rep(0.1, 4))
plot(w, wlines="triang", wpoints="none", number=FALSE, add=TRUE, lty=1,
fillcol  =col,border=NULL,showpoints = F)
# signature
legend("topleft", legend = "© Rafael S. de Souza", bty = "n", text.col = "gray20",cex=1.25)
plot(w, wlines="triang", wpoints="none", number=FALSE, add=TRUE, lty=1,
fillcol  =col,border=NULL,showpoints = F)
# signature
legend("topleft", legend = "© Rafael S. de Souza", bty = "n", text.col = "gray20",cex=1.25)
plot(all)
plot(w, wlines="triang", wpoints="none", number=FALSE, add=TRUE, lty=1,
fillcol  =col,border=NULL,showpoints = F)
# signature
legend("topleft", legend = "© Rafael S. de Souza", bty = "n", text.col = "gray20",cex=1.25)
plot(w, wlines="triang", wpoints="none", number=FALSE, add=TRUE, lty=1,
fillcol  =col,border=NULL,showpoints = F)
# signature
legend("topleft", legend = "© Rafael S. de Souza", bty = "n", text.col = "gray20",cex=1.25)
poly.image( c$x, c$y, rnorm(593,1,10))
plot(w, wlines="triang", wpoints="none", number=FALSE, add=TRUE, lty=1,
fillcol  =col,border=NULL,showpoints = F)
# signature
legend("topleft", legend = "© Rafael S. de Souza", bty = "n", text.col = "gray20",cex=1.25)
420*4
180*4
gc
install.packages('digitize')
library(digitize)
cal = ReadAndCal('/Users/rafael/Downloads/mem.jpg')
data.points = DigitData(col = 'red')
cal = ReadAndCal('/Users/rafael/Downloads/mem.jpg')
data.points = DigitData(col = 'red')
library(digitize)
cal = ReadAndCal('/Users/rafael/Downloads/mem.jpg')
data.points = DigitData(col = 'red')
xx <- seq(0,50,length=500)
df <- do.call(cbind,lapply(1:40,
function(i){
sin(rpois(1,5)*xx+1)+1
}
))
df[1,] <- 0
df[nrow(df),] <- 0
op = par(bg = "white", mar = rep(0.1, 4))
plot(x=xx, y=rep(40,length(xx)), ylim=c(0,45), type="n", ylab="")
for(i in 40:1){
offset <- 1.1*i
polygon(x=xx, y=offset+df[,i], col=col[i], border="black",alpha=0.7)
}
(1/5)^2
(1/5)^
(1/5)^3
79*2000
80*2000
library(ggplot2)
library(ggmap)
library(geosphere)
library(plyr)
mensbracket=read.csv("mensbracket.csv")
ladiesbracket=read.csv("ladiesbracket.csv")
usopenbracket=rbind(mensbracket,ladiesbracket) # combining the two genders
usopencountry=as.data.frame(table(usopenbracket$country)) # number of players from different countries
colnames(usopencountry)=c("Country","Players") # modifying column names
kable(head(usopencountry))
library(ggmap)
install.packages("ggmap", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(ggplot2)
library(ggmap)
library(geosphere)
library(plyr)
mensbracket=read.csv("https://raw.githubusercontent.com/patilv/USOpengreatcircles/master/mensbracket.csv")
ladiesbracket=read.csv("https://raw.githubusercontent.com/patilv/USOpengreatcircles/master/ladiesbracket.csv")
usopenbracket=rbind(mensbracket,ladiesbracket) # combining the two genders
usopencountry=as.data.frame(table(usopenbracket$country)) # number of players from different countries
colnames(usopencountry)=c("Country","Players") # modifying column names
kable(head(usopencountry))
library(plyr)
library(geosphere)
library(ggmap)
library(ggplot2)
mensbracket=read.csv("https://raw.githubusercontent.com/patilv/USOpengreatcircles/master/mensbracket.csv")
ladiesbracket=read.csv("https://raw.githubusercontent.com/patilv/USOpengreatcircles/master/ladiesbracket.csv")
usopenbracket=rbind(mensbracket,ladiesbracket) # combining the two genders
usopencountry=as.data.frame(table(usopenbracket$country)) # number of players from different countries
colnames(usopencountry)=c("Country","Players") # modifying column names
kable(head(usopencountry))
usopencountry=cbind(usopencountry,geocode(as.character(usopencountry$Country)))
usopencountry[5,]$lon=18.383925 # Bosnia
usopencountry[5,]$lat=43.851882 # Bosnia
usopencountry[11,]$lon=33.3974183 # Cyprus
usopencountry[11,]$lat=35.1919937 # Cyprus
usopencountry[45,]$lon=174.885971 # New Zealand
usopencountry[45,]$lat=-40.900557 # New Zealand
nygeocode=geocode(as.character("New York City")) # This was fine
devtools::install_github("lchiffon/wordcloud2")
library(wordcloud2)
wordcloud2(demoFreq, size = 1,shape = 'star')
wordcloud2(demoFreq, size = 1,shape = 'R')
library(devtools)
install_github("mtennekes/tmap", subdir = "pkg")
data(land, World)
# convert to Eckert IV projection
land_eck4 <- set_projection(land, "eck4")
# plot
tm_shape(land_eck4) +
tm_raster("elevation",
breaks=c(-Inf, 250, 500, 1000, 1500, 2000, 2500, 3000, 4000, Inf),
palette = terrain.colors(9),
title="Elevation") +
tm_shape(World) +
tm_borders("grey20") +
tm_grid(projection="longlat", labels.size = .5) +
tm_text("name", size="AREA") +
tm_compass(position = c(.65, .15), color.light = "grey90") +
tm_credits("Eckert IV projection", position = c("RIGHT", "BOTTOM")) +
tm_layout(inner.margins=c(.04,.03, .02, .01),
legend.position = c("left", "bottom"),
legend.frame = TRUE,
bg.color="lightblue",
legend.bg.color="lightblue",
earth.boundary = TRUE,
space.color="grey90") +
tm_style_classic()
library(tmap)
data(land, World)
# convert to Eckert IV projection
land_eck4 <- set_projection(land, "eck4")
# plot
tm_shape(land_eck4) +
tm_raster("elevation",
breaks=c(-Inf, 250, 500, 1000, 1500, 2000, 2500, 3000, 4000, Inf),
palette = terrain.colors(9),
title="Elevation") +
tm_shape(World) +
tm_borders("grey20") +
tm_grid(projection="longlat", labels.size = .5) +
tm_text("name", size="AREA") +
tm_compass(position = c(.65, .15), color.light = "grey90") +
tm_credits("Eckert IV projection", position = c("RIGHT", "BOTTOM")) +
tm_layout(inner.margins=c(.04,.03, .02, .01),
legend.position = c("left", "bottom"),
legend.frame = TRUE,
bg.color="lightblue",
legend.bg.color="lightblue",
earth.boundary = TRUE,
space.color="grey90") +
tm_style_classic()
land
land_eck4
tm_shape(land_eck4) +
tm_raster("water",
breaks=c(-Inf, 250, 500, 1000, 1500, 2000, 2500, 3000, 4000, Inf),
palette = terrain.colors(9),
title="Water") +
tm_shape(World) +
tm_borders("grey20") +
tm_grid(projection="longlat", labels.size = .5) +
tm_text("name", size="AREA") +
tm_compass(position = c(.65, .15), color.light = "grey90") +
tm_credits("Eckert IV projection", position = c("RIGHT", "BOTTOM")) +
tm_layout(inner.margins=c(.04,.03, .02, .01),
legend.position = c("left", "bottom"),
legend.frame = TRUE,
bg.color="lightblue",
legend.bg.color="lightblue",
earth.boundary = TRUE,
space.color="grey90") +
tm_style_classic()
tm_shape(land_eck4) +
tm_raster("Water",
breaks=c(-Inf, 250, 500, 1000, 1500, 2000, 2500, 3000, 4000, Inf),
palette = terrain.colors(9),
title="Water") +
tm_shape(World) +
tm_borders("grey20") +
tm_grid(projection="longlat", labels.size = .5) +
tm_text("name", size="AREA") +
tm_compass(position = c(.65, .15), color.light = "grey90") +
tm_credits("Eckert IV projection", position = c("RIGHT", "BOTTOM")) +
tm_layout(inner.margins=c(.04,.03, .02, .01),
legend.position = c("left", "bottom"),
legend.frame = TRUE,
bg.color="lightblue",
legend.bg.color="lightblue",
earth.boundary = TRUE,
space.color="grey90") +
tm_style_classic()
wstr(land)
str(land)
#----------------------------------------------------------------##----------------------------------------------------------------#
library(e1071);require(mclust);library(RColorBrewer);require(ggthemes);
require(ggpubr);require(ggplot2);require(plotly);require(MASS);require(cluster)
library(fpc);library(plyr);library(reshape);require(ggsci);require(plot3D);
require(rgl);library(spatstat);library("gridExtra")
#----------------------------------------------------------------##----------------------------------------------------------------#
source("gg_ellipse.R")
source("plot_BPT.R")
source("plot_WHAN.R")
set.seed(42)
#----------------------------------------------------------------##----------------------------------------------------------------#
# Read and store data
#AGN<- read.table("/Users/rafael/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Gal_classification/Dataset/class_WHAN_BPT.dat",header=F)
#colnames(AGN)<-c("id", "xx_BPT", "yy_BPT", "class_BPT", "xx_WHAN",
#                         "yy_WHAN", "EW_NII_WHAN", "class_WHAN")
Dat <- read.csv("..//Dataset/Class_WHAN_BPT_D4.csv",header=T)
AGN <- data.frame(xx_BPT = log(Dat$NII/Dat$H_alpha,10),yy_BPT = log(Dat$OIII/Dat$H_beta,10),
yy_WHAN = log(Dat$EW_H_alpha,10), dn4000_obs = Dat$dn4000_obs, dn4000_synth = Dat$dn4000_synth)
# Subsampling for testing, not necessary in the final run
#test_index <- sample(seq_len(nrow(AGN)),replace=F, size = 10000)
AGN_short <- AGN[,c("xx_BPT", "yy_BPT","yy_WHAN")]
rm(AGN)
#----------------------------------------------------------------##----------------------------------------------------------------#
#--Number of Clusters fixed----------------------------------------------------------------#
CLUST2 <- Mclust(AGN_short,G = 2,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
CLUST3 <- Mclust(AGN_short,G = 3,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
CLUST4 <- Mclust(AGN_short,G = 4,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
Dat$GMM_class_3 <- CLUST3$classification
Dat$GMM_class_4 <- CLUST4$classification
dat2 <-data.frame(AGN_short,Dat[,c(1,2,3,4,5,11,12,13)])
write.csv(dat2,"..//Dataset/data_with_GMM_4.csv",row.names=F)
# Export data for post-processing
B2 <- plot_BPT(CLUST2)
B3 <- plot_BPT(CLUST3)
B4 <- plot_BPT(CLUST4)
W2 <- plot_WHAN(CLUST2)
W3 <- plot_WHAN(CLUST3)
W4 <- plot_WHAN(CLUST4)
grid.arrange(B2, B3,B4,W2,W3,W4, ncol = 3,nrow=2)
quartz.save(type = 'pdf', file = 'Figs/Clusters_b.pdf',width = 12, height = 7.5)
#----------------------------------------------------------------##----------------------------------------------------------------#
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Gal_classification/Rafael_R_scripts")
#----------------------------------------------------------------##----------------------------------------------------------------#
library(e1071);require(mclust);library(RColorBrewer);require(ggthemes);
require(ggpubr);require(ggplot2);require(plotly);require(MASS);require(cluster)
library(fpc);library(plyr);library(reshape);require(ggsci);require(plot3D);
require(rgl);library(spatstat);library("gridExtra")
#----------------------------------------------------------------##----------------------------------------------------------------#
source("gg_ellipse.R")
source("plot_BPT.R")
source("plot_WHAN.R")
set.seed(42)
#----------------------------------------------------------------##----------------------------------------------------------------#
# Read and store data
#AGN<- read.table("/Users/rafael/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Gal_classification/Dataset/class_WHAN_BPT.dat",header=F)
#colnames(AGN)<-c("id", "xx_BPT", "yy_BPT", "class_BPT", "xx_WHAN",
#                         "yy_WHAN", "EW_NII_WHAN", "class_WHAN")
Dat <- read.csv("..//Dataset/Class_WHAN_BPT_D4.csv",header=T)
AGN <- data.frame(xx_BPT = log(Dat$NII/Dat$H_alpha,10),yy_BPT = log(Dat$OIII/Dat$H_beta,10),
yy_WHAN = log(Dat$EW_H_alpha,10), dn4000_obs = Dat$dn4000_obs, dn4000_synth = Dat$dn4000_synth)
# Subsampling for testing, not necessary in the final run
#test_index <- sample(seq_len(nrow(AGN)),replace=F, size = 10000)
AGN_short <- AGN[,c("xx_BPT", "yy_BPT","yy_WHAN")]
rm(AGN)
#----------------------------------------------------------------##----------------------------------------------------------------#
#--Number of Clusters fixed----------------------------------------------------------------#
CLUST2 <- Mclust(AGN_short,G = 2,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
CLUST3 <- Mclust(AGN_short,G = 3,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
CLUST4 <- Mclust(AGN_short,G = 4,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
Dat$GMM_class_3 <- CLUST3$classification
Dat$GMM_class_4 <- CLUST4$classification
dat2 <-data.frame(AGN_short,Dat[,c(1,2,3,4,5,11,12,13)])
write.csv(dat2,"..//Dataset/data_with_GMM_4.csv",row.names=F)
# Export data for post-processing
B2 <- plot_BPT(CLUST2)
B3 <- plot_BPT(CLUST3)
B4 <- plot_BPT(CLUST4)
W2 <- plot_WHAN(CLUST2)
W3 <- plot_WHAN(CLUST3)
W4 <- plot_WHAN(CLUST4)
grid.arrange(B2, B3,B4,W2,W3,W4, ncol = 3,nrow=2)
quartz.save(type = 'pdf', file = 'Figs/Clusters_b.pdf',width = 12, height = 7.5)
#----------------------------------------------------------------##----------------------------------------------------------------#
CLUST2 <- Mclust(AGN_short,G = 2,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
set.seed(42)
CLUST3 <- Mclust(AGN_short,G = 3,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
set.seed(42)
CLUST4 <- Mclust(AGN_short,G = 4,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
Dat$GMM_class_3 <- CLUST3$classification
Dat$GMM_class_4 <- CLUST4$classification
dat2 <-data.frame(AGN_short,Dat[,c(1,2,3,4,5,11,12,13)])
write.csv(dat2,"..//Dataset/data_with_GMM_4.csv",row.names=F)
# Export data for post-processing
B2 <- plot_BPT(CLUST2)
B3 <- plot_BPT(CLUST3)
B4 <- plot_BPT(CLUST4)
W2 <- plot_WHAN(CLUST2)
W3 <- plot_WHAN(CLUST3)
W4 <- plot_WHAN(CLUST4)
grid.arrange(B2, B3,B4,W2,W3,W4, ncol = 3,nrow=2)
quartz.save(type = 'pdf', file = 'Figs/Clusters_b.pdf',width = 12, height = 7.5)
#----------------------------------------------------------------##----------------------------------------------------------------#
pdf("mosaic_bpt.pdf",width = 12,height = 8)
grid.arrange(fit0$gg[[1,1]],fit0$gg[[2,1]],fit0$gg[[3,1]],fit0$gg[[4,1]],
fit0$gg[[1,2]],fit0$gg[[2,2]],fit0$gg[[3,2]],fit0$gg[[4,2]],
fit0$gg[[1,3]],fit0$gg[[2,3]],fit0$gg[[3,3]],fit0$gg[[4,3]],
ncol=4,nrow=3)
dev.off()
pdf("mosaic_whan.pdf",width = 12,height = 12)
grid.arrange(fit$gg[[1,1]],fit$gg[[2,1]],fit$gg[[3,1]],fit$gg[[4,1]],
fit$gg[[1,2]],fit$gg[[2,2]],fit$gg[[3,2]],fit$gg[[4,2]],
fit$gg[[1,3]],fit$gg[[2,3]],fit$gg[[3,3]],fit$gg[[4,3]],
fit$gg[[1,4]],fit$gg[[2,4]],fit$gg[[3,4]],fit$gg[[4,4]],
ncol=4,nrow=4)
dev.off()
Dat$BPT_name = as.factor(Dat$class_BPT)
Dat$WHAN_name = as.factor(Dat$class_WHAN)
#class BPT: (no class, SF, composite, AGN) = (0, 1, 2, 3)
# class WHAN: (no class, SF, sAGN, wAGN, retired, passive) = (0, 1, 2, 3, 4, 5)
Dat$BPT_name <- revalue(Dat$BPT_name, c("1"="SF","2"="Composite","3"="AGN") )
Dat$WHAN_name <- revalue(Dat$WHAN_name, c("1"="SF","2"="sAGN","3"="wAGN","4"="retired") )
# Plotting the clustering results
clust<-CLUST4
class<-Dat$BPT_name
data <- AGN_short[,1:2]
class2<-Dat$WHAN_name
data2 <- AGN_short[,c(1,3)]
fit0<- ExClVal(class,clust,data=data)
fit<- ExClVal(class2,clust,data=data2)
bbb<-1-fit0$KL
bbb[bbb<=0.93]<-0
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Gal_classification/Rafael_R_scripts/ExClVal.R', echo=TRUE)
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# turn the 'e+' into plotmath format
l <- gsub("e", "%*%10^", l)
# return this as an expression
parse(text=l)
}
# Function to perform cluster comparison
ExClVal <- function(class = class, clust = clust, data = data){
require(LaplacesDemon)
require(scales)
require(MASS)
require(ggplot2)
class  <- as.factor(class)
# Find number of clusters and classes
Nclass <- length(levels(class))
Ncluster <- clust$G
cluster_sep <- list()
# Separate individual clusters
for(i in 1:Ncluster){
cluster_sep[[i]] = as.data.frame(data[(clust$classification ==i),])
cluster_sep[[i]] = cbind(cluster_sep[[i]],label=rep(LETTERS[i],nrow(cluster_sep[[i]])),
deparse.level = 2)
}
class_sep <- list()
# Separate individual clusters
for(i in 1:Nclass){
class_sep[[i]] = as.data.frame(data[(class == levels(class)[i]),])
class_sep[[i]] = cbind(class_sep[[i]],label=class[class == levels(class)[i]])
}
#Perform LDA on data containing both cluster and class for each combination
# Loop over clusters and classes
data <- matrix(list(),nrow=Ncluster,ncol=Nclass)
ldaResult <- matrix(list(),nrow=Ncluster,ncol=Nclass)
prediction <- matrix(list(),nrow=Ncluster,ncol=Nclass)
clusterProjected <- matrix(list(),nrow=Ncluster,ncol=Nclass)
classProjected <- matrix(list(),nrow=Ncluster,ncol=Nclass)
minRange <- matrix(list(),nrow=Ncluster,ncol=Nclass)
maxRange <- matrix(list(),nrow=Ncluster,ncol=Nclass)
pdfCluster <- matrix(list(),nrow=Ncluster,ncol=Nclass)
pdfClass <- matrix(list(),nrow=Ncluster,ncol=Nclass)
KL <- matrix(list(),nrow=Ncluster,ncol=Nclass)
gg <- matrix(list(),nrow=Ncluster,ncol=Nclass)
clcolor <- c("#FF1493","#7FFF00", "#00BFFF", "#FF8C00")
for (i in 1:Ncluster){
for (j in 1:Nclass){
data[[i,j]] = rbind(cluster_sep[[i]], class_sep[[j]])
data[[i,j]]$label <- droplevels(data[[i,j]]$label)
ldaResult[[i,j]] = lda(label ~ ., data[[i,j]])
prediction[[i,j]] =  predict(ldaResult[[i,j]])
#Getting projected matrices for cluster and class from predicted values
clusterProjected[[i,j]] = prediction[[i,j]]$x[1:nrow(cluster_sep[[i]]),]
classProjected[[i,j]] = prediction[[i,j]]$x[(nrow(cluster_sep[[i]])+1):(dim(data[[i,j]])[1]),]
#Get probability density for each cluster and class
#Extending the range so that both densities are within minimum
#and maximum of obtained density values
minRange[[i,j]] = min(clusterProjected[[i,j]], classProjected[[i,j]])
maxRange[[i,j]] = max(clusterProjected[[i,j]], classProjected[[i,j]])
pdfCluster[[i,j]] = density(clusterProjected[[i,j]], from = minRange[[i,j]]-5, to=maxRange[[i,j]]+5,n=1024)
pdfClass[[i,j]] = density(classProjected[[i,j]], from = minRange[[i,j]]-5, to=maxRange[[i,j]]+5,n=1024)
#pdfCluster[[i,j]] = density(clusterProjected[[i,j]])
#pdfClass[[i,j]] = density(classProjected[[i,j]])
#Get probability density from the densities
pdfCluster[[i,j]]$y = pdfCluster[[i,j]]$y/max(pdfCluster[[i,j]]$y)
pdfClass[[i,j]]$y = pdfClass[[i,j]]$y/max(pdfClass[[i,j]]$y)
# Calcualte K-L distance using package Laplace Demon
KL[[i,j]] <- KLD(pdfCluster[[i,j]]$y,pdfClass[[i,j]]$y,base=2)$mean.sum.KLD
# Plot density of cluster vs classes
gg[[i,j]] <- ggplot(
data=data.frame(x=pdfCluster[[i,j]]$x,y=pdfCluster[[i,j]]$y),aes(x=x,y=y))+
geom_polygon(data=data.frame(x=pdfClass[[i,j]]$x,y=pdfClass[[i,j]]$y),aes(x=x,y=y),
fill="gray80",size=1.25,alpha=0.7)+
geom_polygon(linetype="dashed",fill = clcolor[i],alpha=0.4)+
theme_bw()+
scale_y_continuous(breaks=pretty_breaks())+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=15))+xlab("LD1")+ylab("Density")+
ggtitle(paste("G",i,"/",levels(class)[j],sep=""))
#+
#  annotate("text",  x=Inf, y = Inf, label = paste("Cluster ",i,sep=""), vjust=3, hjust=1.5,size=5,
#           color="red3")+
# annotate("text",  x=Inf, y = Inf, label = levels(class)[j], vjust=5, hjust=1.5,size=5,
#          color="blue3")
}
z <- matrix(unlist(KL),nrow=nrow(KL),ncol=ncol(KL))
rownames(z) <- c(seq(1:Ncluster))
colnames(z) <- c(levels(class))
return(list(KL=z,
pdfCluster = pdfCluster,
pdfClass = pdfClass,
gg=gg))
}
require(mclust)
require(reshape2)
library(plyr)
library(gridExtra)
library(circlize)
Dat <- read.csv("..//Dataset/Class_WHAN_BPT_D4.csv",header=T)
AGN <- data.frame(xx_BPT = log(Dat$NII/Dat$H_alpha,10),yy_BPT = log(Dat$OIII/Dat$H_beta,10),
yy_WHAN = log(Dat$EW_H_alpha,10), dn4000_obs = Dat$dn4000_obs, dn4000_synth = Dat$dn4000_synth)
# Subsampling for testing, not necessary in the final run
#test_index <- sample(seq_len(nrow(AGN)),replace=F, size = 10000)
AGN_short <- AGN[,c("xx_BPT", "yy_BPT","yy_WHAN")]
set.seed(42)
CLUST4 <- Mclust(AGN_short,G = 4,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
Dat$BPT_name = as.factor(Dat$class_BPT)
Dat$WHAN_name = as.factor(Dat$class_WHAN)
#class BPT: (no class, SF, composite, AGN) = (0, 1, 2, 3)
# class WHAN: (no class, SF, sAGN, wAGN, retired, passive) = (0, 1, 2, 3, 4, 5)
Dat$BPT_name <- revalue(Dat$BPT_name, c("1"="SF","2"="Composite","3"="AGN") )
Dat$WHAN_name <- revalue(Dat$WHAN_name, c("1"="SF","2"="sAGN","3"="wAGN","4"="retired") )
# Plotting the clustering results
clust<-CLUST4
class<-Dat$BPT_name
data <- AGN_short[,1:2]
class2<-Dat$WHAN_name
data2 <- AGN_short[,c(1,3)]
fit0<- ExClVal(class,clust,data=data)
fit<- ExClVal(class2,clust,data=data2)
pdf("mosaic_bpt.pdf",width = 12,height = 8)
grid.arrange(fit0$gg[[1,1]],fit0$gg[[2,1]],fit0$gg[[3,1]],fit0$gg[[4,1]],
fit0$gg[[1,2]],fit0$gg[[2,2]],fit0$gg[[3,2]],fit0$gg[[4,2]],
fit0$gg[[1,3]],fit0$gg[[2,3]],fit0$gg[[3,3]],fit0$gg[[4,3]],
ncol=4,nrow=3)
dev.off()
pdf("mosaic_whan.pdf",width = 12,height = 12)
grid.arrange(fit$gg[[1,1]],fit$gg[[2,1]],fit$gg[[3,1]],fit$gg[[4,1]],
fit$gg[[1,2]],fit$gg[[2,2]],fit$gg[[3,2]],fit$gg[[4,2]],
fit$gg[[1,3]],fit$gg[[2,3]],fit$gg[[3,3]],fit$gg[[4,3]],
fit$gg[[1,4]],fit$gg[[2,4]],fit$gg[[3,4]],fit$gg[[4,4]],
ncol=4,nrow=4)
dev.off()
dat2
plot_BPT(CLUST4)
Dat$GMM_class_4 <- CLUST4$classification
dat2 <-data.frame(AGN_short,Dat[,c(1,2,3,4,5,11,12,13)])
write.csv(dat2,"..//Dataset/data_with_GMM_4.csv",row.names=F)
dat2[1,]
Dat[1,]
AGN_short[1,]
dat2 <-data.frame(AGN_short,Dat[,c(1,2,3,4,5,11,12,13,14,15)])
write.csv(dat2,"..//Dataset/data_with_GMM_4.csv",row.names=F)
