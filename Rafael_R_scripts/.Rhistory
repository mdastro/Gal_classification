fit.link    <- Preds_nzero$fit
se          <- Preds_nzero$se  # Standard errors
CI.L        <- fit.link-qnorm(0.975)*se
CI.R        <- fit.link+qnorm(0.975)*se
CI          <- cbind(fit.link,CI.L,CI.R)
CI           <- exp(CI)/(1+exp(CI)) # The first column correponds to the estimated probability of being non-zero.
colnames(CI) <- c("Predictions","CI_L","CI_R")
anova.gam(simple_Beta_y,npar_Beta_y,test="Chisq") # Test the simple model against the more complicated one
require(magick)
logo <- image_read("/Users/Rafael/Downloads/pho.png")
banana <- image_read("/Users/Rafael/Downloads/totorofitness3.gif")
front <- image_scale(banana, "300")
background <- image_scale(logo, "600")
frames <- lapply(as.list(front), function(x) image_flatten(c(background, x)))
image_write(image_animate(image_join(frames)), "bear.gif")
install.packages("magick")
require(devtools)
install_github("ropensci/magick")
logo <- image_read("/Users/Rafael/Downloads/pho.png")
banana <- image_read("/Users/Rafael/Downloads/totorofitness3.gif")
front <- image_scale(banana, "300")
background <- image_scale(logo, "600")
frames <- lapply(as.list(front), function(x) image_flatten(c(background, x)))
image_write(image_animate(image_join(frames)), "bear.gif")
require(magick)
logo <- image_read("/Users/Rafael/Downloads/pho.png")
banana <- image_read("/Users/Rafael/Downloads/totorofitness3.gif")
front <- image_scale(banana, "300")
background <- image_scale(logo, "600")
frames <- lapply(as.list(front), function(x) image_flatten(c(background, x)))
image_write(image_animate(image_join(frames)), "bear.gif")
logo <- image_read("/Users/Rafael/Downloads/rute.jpg")
banana <- image_read("/Users/Rafael/Downloads/totorofitness3.gif")
front <- image_scale(banana, "300")
background <- image_scale(logo, "600")
frames <- lapply(as.list(front), function(x) image_flatten(c(background, x)))
image_animate(image_join(frames))
logo <- image_read("/Users/Rafael/Downloads/rute.jpg")
banana <- image_read("/Users/Rafael/Downloads/to.gif")
front <- image_scale(banana, "300")
background <- image_scale(logo, "600")
frames <- lapply(as.list(front), function(x) image_flatten(c(background, x)))
image_animate(image_join(frames)),
frames <- lapply(as.list(front), function(x) image_flatten(c(background, x)))
image_write(image_animate(image_join(frames)), "bear.gif")
frames
image_animate(image_join(frames))
logo <- image_read("/Users/Rafael/Downloads/rute.jpg")
banana <- image_read("/Users/Rafael/Downloads/to.gif")
front <- image_scale(banana, "300")
background <- image_scale(logo, "400")
frames <- lapply(as.list(front), function(x) image_flatten(c(background, x)))
image_write(image_animate(image_join(frames)), "bear.gif")
image_write(image_animate(image_join(frames)), "bear.gif")
front <- image_scale(banana, "200")
background <- image_scale(logo, "300")
frames <- lapply(as.list(front), function(x) image_flatten(c(background, x)))
image_write(image_animate(image_join(frames)), "bear.gif")
#----------------------------------------------------------------##----------------------------------------------------------------#
library(e1071);require(mclust);library(RColorBrewer);require(ggthemes);
require(ggpubr);require(ggplot2);require(plotly);require(MASS);require(cluster)
library(fpc);library(plyr);library(reshape);require(ggsci);require(plot3D);require(rgl);library(spatstat)
#----------------------------------------------------------------##----------------------------------------------------------------#
#----------------------------------------------------------------##----------------------------------------------------------------#
# Read and store data
AGN<- read.table("/Users/rafael/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Gal_classification/Dataset/class_WHAN_BPT.dat",header=F)
colnames(AGN)<-c("id", "xx_BPT", "yy_BPT", "class_BPT", "xx_WHAN",
"yy_WHAN", "EW_NII_WHAN", "class_WHAN")
# Subsampling for testing, not necessary in the final run
#test_index <- sample(seq_len(nrow(AGN)),replace=F, size = 10000)
AGN_short <- AGN[,c("xx_BPT", "yy_BPT","yy_WHAN")]
rm(AGN)
#----------------------------------------------------------------##----------------------------------------------------------------#
#----------------------------------------------------------------##----------------------------------------------------------------#
#--Number of Clusters fixed----------------------------------------------------------------#
CLUST <- Mclust(AGN_short,G = 3,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
#--Get Ellipse info----------------------------------------------------------------#
source("gg_ellipse.R")
EL<-df.ellipses(CLUST,level=0.997)
El_BPT<-subset(EL,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT$classification <-as.factor(El_BPT$classification)
El_WHAN<-subset(EL,xvar=="yy_WHAN" & yvar=="xx_BPT")
El_WHAN$classification <-as.factor(El_WHAN$classification)
#----------------------------------------------------------------##----------------------------------------------------------------#
# Customized plots via ggplot2
gdata <- data.frame(x=AGN_short$xx_BPT,y=AGN_short$yy_BPT,z=AGN_short$yy_WHAN, type=as.factor(CLUST$classification),
uncertainty = CLUST$uncertainty )
#-----------------------
# BPT PLOT
#-----------------------
xx = seq(-4, 0.0, 0.01)
Ka = 0.61 / (xx - 0.05) + 1.30
gKa <- data.frame(xx,Ka)
#-----------------------
xx1 = seq(-4, 0.4, 0.01)
Ke = 0.61 / (xx1 - 0.47) + 1.19
gKe <- data.frame(xx1,Ke)
#-----------------------
xx2 = seq(-0.43, 5, 0.01)
Sey = 1.05 * xx2 + 0.45
gSey <- data.frame(xx2,Sey)
# BPT projection
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
#----------------------------------------------------------------##----------------------------------------------------------------#
library(e1071);require(mclust);library(RColorBrewer);require(ggthemes);
require(ggpubr);require(ggplot2);require(plotly);require(MASS);require(cluster)
library(fpc);library(plyr);library(reshape);require(ggsci);require(plot3D);require(rgl);library(spatstat)
#----------------------------------------------------------------##----------------------------------------------------------------#
#----------------------------------------------------------------##----------------------------------------------------------------#
# Read and store data
AGN<- read.table("/Users/rafael/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Gal_classification/Dataset/class_WHAN_BPT.dat",header=F)
colnames(AGN)<-c("id", "xx_BPT", "yy_BPT", "class_BPT", "xx_WHAN",
"yy_WHAN", "EW_NII_WHAN", "class_WHAN")
# Subsampling for testing, not necessary in the final run
#test_index <- sample(seq_len(nrow(AGN)),replace=F, size = 10000)
AGN_short <- AGN[,c("xx_BPT", "yy_BPT","yy_WHAN")]
rm(AGN)
#----------------------------------------------------------------##----------------------------------------------------------------#
#----------------------------------------------------------------##----------------------------------------------------------------#
#--Number of Clusters fixed----------------------------------------------------------------#
CLUST <- Mclust(AGN_short,G = 3,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
#--Get Ellipse info----------------------------------------------------------------#
#source("gg_ellipse.R")
EL68<-df.ellipses(CLUST,level=0.68)
EL95<-df.ellipses(CLUST,level=0.95)
EL99<-df.ellipses(CLUST,level=0.997)
El_BPT68<-subset(EL68,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT68$classification <-as.factor(El_BPT68$classification)
#
El_BPT95<-subset(EL95,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT95$classification <-as.factor(El_BPT95$classification)
#
El_BPT99<-subset(EL99,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT99$classification <-as.factor(El_BPT99$classification)
#
El_WHAN<-subset(EL,xvar=="yy_WHAN" & yvar=="xx_BPT")
El_WHAN$classification <-as.factor(El_WHAN$classification)
#----------------------------------------------------------------##----------------------------------------------------------------#
# Customized plots via ggplot2
gdata <- data.frame(x=AGN_short$xx_BPT,y=AGN_short$yy_BPT,z=AGN_short$yy_WHAN, type=as.factor(CLUST$classification),
uncertainty = CLUST$uncertainty )
#-----------------------
# BPT PLOT
#-----------------------
xx = seq(-4, 0.0, 0.01)
Ka = 0.61 / (xx - 0.05) + 1.30
gKa <- data.frame(xx,Ka)
#-----------------------
xx1 = seq(-4, 0.4, 0.01)
Ke = 0.61 / (xx1 - 0.47) + 1.19
gKe <- data.frame(xx1,Ke)
#-----------------------
xx2 = seq(-0.43, 5, 0.01)
Sey = 1.05 * xx2 + 0.45
gSey <- data.frame(xx2,Sey)
# BPT projection
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(color="gray80",alpha=0.2,size=0.5)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
# geom_path(data=El_BPT99,aes(x=xval,y=yval,group=classification,color=classification
#                                 ),size=1)+
geom_polygon(data=El_BPT95,aes(x=xval,y=yval,group=classification,
color=classification,fill=classification),
size=1,alpha=0.2)+
geom_polygon(data=El_BPT68,aes(x=xval,y=yval,group=classification,color=classification,
fill=classification
),size=1,alpha=0.4)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Gal_classification/Rafael_R_scripts")
#----------------------------------------------------------------##----------------------------------------------------------------#
library(e1071);require(mclust);library(RColorBrewer);require(ggthemes);
require(ggpubr);require(ggplot2);require(plotly);require(MASS);require(cluster)
library(fpc);library(plyr);library(reshape);require(ggsci);require(plot3D);require(rgl);library(spatstat)
#----------------------------------------------------------------##----------------------------------------------------------------#
#----------------------------------------------------------------##----------------------------------------------------------------#
# Read and store data
AGN<- read.table("/Users/rafael/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Gal_classification/Dataset/class_WHAN_BPT.dat",header=F)
colnames(AGN)<-c("id", "xx_BPT", "yy_BPT", "class_BPT", "xx_WHAN",
"yy_WHAN", "EW_NII_WHAN", "class_WHAN")
# Subsampling for testing, not necessary in the final run
#test_index <- sample(seq_len(nrow(AGN)),replace=F, size = 10000)
AGN_short <- AGN[,c("xx_BPT", "yy_BPT","yy_WHAN")]
rm(AGN)
#----------------------------------------------------------------##----------------------------------------------------------------#
#----------------------------------------------------------------##----------------------------------------------------------------#
#--Number of Clusters fixed----------------------------------------------------------------#
CLUST <- Mclust(AGN_short,G = 3,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
#--Get Ellipse info----------------------------------------------------------------#
#source("gg_ellipse.R")
EL68<-df.ellipses(CLUST,level=0.68)
EL95<-df.ellipses(CLUST,level=0.95)
EL99<-df.ellipses(CLUST,level=0.997)
El_BPT68<-subset(EL68,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT68$classification <-as.factor(El_BPT68$classification)
#
El_BPT95<-subset(EL95,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT95$classification <-as.factor(El_BPT95$classification)
#
El_BPT99<-subset(EL99,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT99$classification <-as.factor(El_BPT99$classification)
#
El_WHAN<-subset(EL,xvar=="yy_WHAN" & yvar=="xx_BPT")
El_WHAN$classification <-as.factor(El_WHAN$classification)
#----------------------------------------------------------------##----------------------------------------------------------------#
# Customized plots via ggplot2
gdata <- data.frame(x=AGN_short$xx_BPT,y=AGN_short$yy_BPT,z=AGN_short$yy_WHAN, type=as.factor(CLUST$classification),
uncertainty = CLUST$uncertainty )
#-----------------------
# BPT PLOT
#-----------------------
xx = seq(-4, 0.0, 0.01)
Ka = 0.61 / (xx - 0.05) + 1.30
gKa <- data.frame(xx,Ka)
#-----------------------
xx1 = seq(-4, 0.4, 0.01)
Ke = 0.61 / (xx1 - 0.47) + 1.19
gKe <- data.frame(xx1,Ke)
#-----------------------
xx2 = seq(-0.43, 5, 0.01)
Sey = 1.05 * xx2 + 0.45
gSey <- data.frame(xx2,Sey)
# BPT projection
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(color="gray80",alpha=0.2,size=0.5)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
# geom_path(data=El_BPT99,aes(x=xval,y=yval,group=classification,color=classification
#                                 ),size=1)+
geom_polygon(data=El_BPT95,aes(x=xval,y=yval,group=classification,
color=classification,fill=classification),
size=1,alpha=0.2)+
geom_polygon(data=El_BPT68,aes(x=xval,y=yval,group=classification,color=classification,
fill=classification
),size=1,alpha=0.4)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
CLUST
source("gg_ellipse.R")
#--Get Ellipse info----------------------------------------------------------------#
EL68<-df.ellipses(CLUST,level=0.68)
EL95<-df.ellipses(CLUST,level=0.95)
EL99<-df.ellipses(CLUST,level=0.997)
El_BPT68<-subset(EL68,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT68$classification <-as.factor(El_BPT68$classification)
#
El_BPT95<-subset(EL95,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT95$classification <-as.factor(El_BPT95$classification)
#
El_BPT99<-subset(EL99,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT99$classification <-as.factor(El_BPT99$classification)
#
El_WHAN<-subset(EL,xvar=="yy_WHAN" & yvar=="xx_BPT")
El_WHAN$classification <-as.factor(El_WHAN$classification)
gdata <- data.frame(x=AGN_short$xx_BPT,y=AGN_short$yy_BPT,z=AGN_short$yy_WHAN, type=as.factor(CLUST$classification),
uncertainty = CLUST$uncertainty )
#-----------------------
# BPT PLOT
#-----------------------
xx = seq(-4, 0.0, 0.01)
Ka = 0.61 / (xx - 0.05) + 1.30
gKa <- data.frame(xx,Ka)
#-----------------------
xx1 = seq(-4, 0.4, 0.01)
Ke = 0.61 / (xx1 - 0.47) + 1.19
gKe <- data.frame(xx1,Ke)
#-----------------------
xx2 = seq(-0.43, 5, 0.01)
Sey = 1.05 * xx2 + 0.45
gSey <- data.frame(xx2,Sey)
# BPT projection
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(color="gray80",alpha=0.2,size=0.5)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
# geom_path(data=El_BPT99,aes(x=xval,y=yval,group=classification,color=classification
#                                 ),size=1)+
geom_polygon(data=El_BPT95,aes(x=xval,y=yval,group=classification,
color=classification,fill=classification),
size=1,alpha=0.2)+
geom_polygon(data=El_BPT68,aes(x=xval,y=yval,group=classification,color=classification,
fill=classification
),size=1,alpha=0.4)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
CLUST2 <- Mclust(AGN_short,G = 2,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
CLUST3 <- Mclust(AGN_short,G = 3,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
CLUST4 <- Mclust(AGN_short,G = 4,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
plot_BPT<-function(CLUST){
#--Get Ellipse info----------------------------------------------------------------#
EL68<-df.ellipses(CLUST,level=0.68)
EL95<-df.ellipses(CLUST,level=0.95)
EL99<-df.ellipses(CLUST,level=0.997)
El_BPT68<-subset(EL68,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT68$classification <-as.factor(El_BPT68$classification)
#
El_BPT95<-subset(EL95,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT95$classification <-as.factor(El_BPT95$classification)
#
El_BPT99<-subset(EL99,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT99$classification <-as.factor(El_BPT99$classification)
#
#El_WHAN<-subset(EL,xvar=="yy_WHAN" & yvar=="xx_BPT")
#El_WHAN$classification <-as.factor(El_WHAN$classification)
#----------------------------------------------------------------##----------------------------------------------------------------#
# Customized plots via ggplot2
gdata <- data.frame(x=AGN_short$xx_BPT,y=AGN_short$yy_BPT,z=AGN_short$yy_WHAN, type=as.factor(CLUST$classification),
uncertainty = CLUST$uncertainty )
#-----------------------
# BPT PLOT
#-----------------------
xx = seq(-4, 0.0, 0.01)
Ka = 0.61 / (xx - 0.05) + 1.30
gKa <- data.frame(xx,Ka)
#-----------------------
xx1 = seq(-4, 0.4, 0.01)
Ke = 0.61 / (xx1 - 0.47) + 1.19
gKe <- data.frame(xx1,Ke)
#-----------------------
xx2 = seq(-0.43, 5, 0.01)
Sey = 1.05 * xx2 + 0.45
gSey <- data.frame(xx2,Sey)
# BPT projection
gg<-ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(color="gray80",alpha=0.2,size=0.5)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
# geom_path(data=El_BPT99,aes(x=xval,y=yval,group=classification,color=classification
#                                 ),size=1)+
geom_polygon(data=El_BPT95,aes(x=xval,y=yval,group=classification,
color=classification,fill=classification),
size=1,alpha=0.2)+
geom_polygon(data=El_BPT68,aes(x=xval,y=yval,group=classification,color=classification,
fill=classification
),size=1,alpha=0.4)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
return(gg)
}
plot_BPT(CLUST2)
B2<-plot_BPT(CLUST2)
B3<-plot_BPT(CLUST3)
B4<-plot_BPT(CLUST4)
library("gridExtra")
grid.arrange(B2, B3,B4, ncol = 3)
source("plot_BPT.R")
plot_WHAN<-function(CLUST){
EL68<-df.ellipses(CLUST,level=0.68)
EL95<-df.ellipses(CLUST,level=0.95)
EL99<-df.ellipses(CLUST,level=0.997)
El_WHAN68<-subset(EL68,xvar=="yy_WHAN" & yvar=="xx_BPT")
El_WHAN68$classification <-as.factor(El_WHAN68$classification)
#
El_WHAN95<-subset(EL95,xvar=="yy_WHAN" & yvar=="xx_BPT")
El_WHAN95$classification <-as.factor(El_WHAN95$classification)
#
El_WHAN99<-subset(EL99,xvar=="yy_WHAN" & yvar=="xx_BPT")
El_WHAN99$classification <-as.factor(El_WHAN99$classification)
#
gdata <- data.frame(x=AGN_short$xx_BPT,y=AGN_short$yy_BPT,z=AGN_short$yy_WHAN, type=as.factor(CLUST$classification),
uncertainty = CLUST$uncertainty )
gg<-ggplot(data=gdata,aes(x=x,y=z))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log EW (H', alpha, ')'))) +
geom_point(color="gray80",alpha=0.2,size=0.5)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3","#fb9a99"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_polygon(data=El_WHAN95,aes(x=xval,y=yval,group=classification,
color=classification,fill=classification),
size=1,alpha=0.2)+
geom_polygon(data=El_WHAN68,aes(x=xval,y=yval,group=classification,color=classification,
fill=classification
),size=1,alpha=0.4)+
theme_bw() +
coord_cartesian(xlim=c(-1.5,1.3),ylim=c(-1.1,2.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))+
geom_segment(aes(x = -0.4, y = 5, xend = -0.4, yend = 0.5),size=1.25,linetype="dashed",color="gray25")+
geom_hline(yintercept = 0.5,linetype="dashed",size=1.25,color="gray25")+
geom_segment(aes(x = -0.4, y = 0.78, xend = 2, yend = 0.78),linetype="dashed",size=1.25,color="gray25")
#----------------------------------------------------------------##----------------------------------------------------------------#
return(gg)
}
plot_WHAN(CLUST2)
plot_WHAN(CLUST3)
source("plot_BPT.R")
plot_BPT(CLUST2)
plot_BPT(CLUST3)
source("plot_BPT.R")
source("plot_WHAN.R")
B2<-plot_BPT(CLUST2)
B3<-plot_BPT(CLUST3)
B4<-plot_BPT(CLUST4)
W2<-plot_WHAN(CLUST2)
W3<-plot_WHAN(CLUST3)
W4<-plot_WHAN(CLUST4)
grid.arrange(B2, B3,B4,W2,W3,W4, ncol = 3,nrow=2)
quartz.save(type = 'pdf', file = 'Clusters.pdf',width = 16, height = 8)
source("plot_BPT.R")
plot_BPT(CLUST3)
source("plot_WHAN.R")
plot_WHAN(CLUST3)
source("plot_WHAN.R")
plot_WHAN(CLUST3)
dr = MclustDR(CLUST3)
dr
pr<-predict(dr)
pr
plot(pr$density)
pr$z
plot(pr)
plot(dr)
dr$basis
dr$x
dr$x[1,]
dr$M
dr$raw.evectors
dr$mu
dr$numdir
dr$dir
dr$dir[1,]
dr$dir[,1]
dr$dir
dr$dir[1,]
dr$dir[1:3,1]
dr$dir$Dir1
plot(dr$dir[,1],pr$density)
plot(dr$dir[,1],pr$density,cex=0.2)
plot(dr$dir[,1],pr$density,cex=0.2,alpha=0.4)
plot(dr$dir[,1],pr$density,cex=0.1)
plot(dr$dir[,1],pr$density,cex=0.1)
plot(dr$dir[,1],pr$density,cex=0.1,col="gray90")
plot(dr$dir[,1],pr$density,cex=0.1,col="gray90",type="l")
plot(dr$dir[,1],pr$density,cex=0.1,col="gray90",type="o")
plot(dr$dir[,1],pr$density,cex=0.1,col="gray90",type="p")
dr
hist(dr$dir)
density(dr$dir)
plot(density(dr$dir))
mod4<-densityMclust(dr$dir[,1])
plot(mod4, what = "density", data = dr$dir[,1], breaks = 15)
summary(dr)
predict(CLUST3)
pr<-predict(CLUST3)
pr$z
pr$classification
plot(pr$z[,1],pr$z[,2])
