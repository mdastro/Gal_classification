lines(xx, Ka, col = 'grey30', lwd = 3,lty = 1)
lines(xx1, Ke, col = 'grey30', lwd = 3,lty = 4)
lines(xx2, Sey, col = 'grey30', lwd = 3, lty = 2)
#-----------------------
# BPT PLOT
#-----------------------
xx = seq(-4, 0.0, 0.01)
Ka = 0.61 / (xx - 0.05) + 1.30
gKa <- data.frame(xx,Ka)
#-----------------------
xx1 = seq(-4, 0.4, 0.01)
Ke = 0.61 / (xx1 - 0.47) + 1.19
gKe <- data.frame(xx1,Ke)
#-----------------------
xx2 = seq(-0.43, 1, 0.01)
Sey = 1.05 * xx2 + 0.45
gSey <- data.frame(xx2,Sey)
filled.contour(d0_BPT,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),
xlab = expression(paste('log [NII]/H', alpha)),
ylab = expression(paste('log [OIII]/H', beta)),xlim=xrng,ylim= yrng
)
lines(xx, Ka, col = 'grey30', lwd = 3,lty = 1)
lines(xx1, Ke, col = 'grey30', lwd = 3,lty = 4)
lines(xx2, Sey, col = 'grey30', lwd = 3, lty = 2)
filled.contour(d0_BPT,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),
xlab = expression(paste('log [NII]/H', alpha)),
ylab = expression(paste('log [OIII]/H', beta)),xlim=xrng,ylim= yrng
)
lines(xx, Ka, col = 'grey30', lwd = 3,lty = 1)
lines(xx1, Ke, col = 'grey30', lwd = 3,lty = 4)
xx2
lines(xx2, Sey, col = 'grey30', lwd = 3, lty = 2)
d0_BPT
range(d0_BPT$x)
range(d0_BPT$y)
range(d0_BPT$z)
d0_BPT = kde2d(AGN_short$xx_BPT, AGN_short$yy_BPT, lims=c(xrng, yrng), n=500,
h = rep(0.1, 2))
filled.contour(d0_BPT,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),
xlab = expression(paste('log [NII]/H', alpha)),
ylab = expression(paste('log [OIII]/H', beta)),xlim=xrng,ylim= yrng
)
lines(xx, Ka, col = 'grey30', lwd = 3,lty = 1)
lines(xx1, Ke, col = 'grey30', lwd = 3,lty = 4)
lines(xx2, Sey, col = 'grey30', lwd = 3, lty = 2)
wireframe(d0_BPT$z, drape=TRUE, xlab="x", ylab="y", scale=list(arrows=FALSE))
filled.contour(d0_BPT,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),
xlab = expression(paste('log [NII]/H', alpha)),
ylab = expression(paste('log [OIII]/H', beta)),xlim=xrng,ylim= yrng
)
lines(xx, Ka, col = 'grey30', lwd = 3,lty = 1)
lines(xx1, Ke, col = 'grey30', lwd = 3,lty = 4)
lines(xx2, Sey, col = 'grey30', lwd = 3, lty = 2)
filled.contour(d0_BPT,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),
xlab = expression(paste('log [NII]/H', alpha)),
ylab = expression(paste('log [OIII]/H', beta)),xlim=xrng,ylim= yrng
)
lines(xx, Ka, col = 'grey30', lwd = 3,lty = 1)
lines(xx1, Ke, col = 'grey30', lwd = 3,lty = 4)
lines(xx2, Sey, col = 'grey30', lwd = 3, lty = 2)
filled.contour(d0_BPT,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),
xlab = expression(paste('log [NII]/H', alpha)),
ylab = expression(paste('log [OIII]/H', beta)),xlim=xrng,ylim= yrng,
lines(xx, Ka, col = 'grey30', lwd = 3,lty = 1)
)
filled.contour(d0_BPT,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),
xlab = expression(paste('log [NII]/H', alpha)),
ylab = expression(paste('log [OIII]/H', beta)),xlim=xrng,ylim= yrng,
lines(xx, Ka, col = 'grey30', lwd = 3,lty = 1)
)
filled.contour(d0_BPT,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),
xlab = expression(paste('log [NII]/H', alpha)),
ylab = expression(paste('log [OIII]/H', beta)),xlim=xrng,ylim= yrng,
points(xx, Ka, col = 'grey30', lwd = 3,lty = 1)
)
plot(d0_BPT$z,d2_BPT$z)
d0_BPT = kde2d(AGN_short$xx_BPT, AGN_short$yy_BPT, lims=c(xrng, yrng), n=100,
h = rep(0.1, 2))
plot(d0_BPT$z,d2_BPT$z)
obs<-as.numeric(d0_BPT$z)
pred2<-as.numeric(d2_BPT$z)
pred3<-as.numeric(d3_BPT$z)
pred4<-as.numeric(d4_BPT$z)
fit2<-lm(obs~pred2)
plot(fit2)
fit4<-lm(obs~pred4)
plot(fit4)
plot(obs,pred4)
gfit4<-data.frame(x=obs,y=pred4)
ggplot(gfit4,aes(x=x,y=y))+geom_point()+
stat_smooth()
ggplot(gfit4,aes(x=x,y=y))+geom_point()+
geom_smooth()
gfit4
ggplot(gfit4,aes(x=x,y=y))+geom_point()+
geom_smooth(formula = y ~ x, se = TRUE)
ggplot(gfit4,aes(x=x,y=y))+geom_point()+
geom_smooth(formula = y ~ x, se = TRUE,method = "lm")
ggplot(gfit4,aes(x=x,y=y))+geom_point()+
geom_smooth(se = TRUE,method = "lm")
ggplot(gfit4,aes(x=x,y=y))+geom_point()+
geom_smooth(formula=y ~ poly(x, 2),se = TRUE,method = "lm")
ggplot(gfit4,aes(x=x,y=y))+geom_point()+
stat_smooth(formula=y ~ poly(x, 2),se = TRUE,method = "lm")
gfit2<-data.frame(x=obs,y=pred2)
ggplot(gfit2,aes(x=x,y=y))+geom_point()+
stat_smooth(formula=y ~ poly(x, 2),se = TRUE,method = "lm")
fit4
summary(fit4)
summary(fit2)
fit3<-lm(obs~pred3)
gfit3<-data.frame(x=obs,y=pred3)
ggplot(gfit3,aes(x=x,y=y))+geom_point()+
stat_smooth(formula=y ~ poly(x, 2),se = TRUE,method = "lm")
summary(fit3)
summary(fit2)
gr2<-ggplot(gfit2,aes(x=x,y=y))+geom_point()+
stat_smooth(formula=y ~ poly(x, 2),se = TRUE,method = "lm")
gr3<-ggplot(gfit3,aes(x=x,y=y))+geom_point()+
stat_smooth(formula=y ~ poly(x, 2),se = TRUE,method = "lm")
gr4<-ggplot(gfit4,aes(x=x,y=y))+geom_point()+
stat_smooth(formula=y ~ poly(x, 2),se = TRUE,method = "lm")
grid.arrange(B2, B3,B4,W2,W3,W4, ncol = 2,nrow=2)
grid.arrange(gr2, gr3,gr4, ncol = 2,nrow=2)
summary(fit4)
bic(fit4)
sum(residuals(fit4, type = "pearson")^2)
residuals(fit4, type = "pearson")^2
ggplot(gfit2,aes(x=x,y=y))+geom_point()+
stat_smooth(formula=y ~ poly(x, 2),se = TRUE,method = "lm")+
theme_bw()+
theme(panel.background = element_rect(fill="white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.background = element_rect(fill="white"),
legend.key = element_rect(fill = "white",color = "white"),
plot.background = element_rect(fill = "white"),
legend.position="top",
axis.title.y = element_text(vjust = 0.1,margin=margin(0,10,0,0)),
axis.title.x = element_text(vjust = 0.5),
text = element_text(size = 25,family="serif"))
ggplot(gfit2,aes(x=x,y=y))+geom_point()+
stat_smooth(formula=y ~ poly(x, 2),se = TRUE,method = "lm")+
theme_bw()+
theme(legend.background = element_rect(fill="white"),
legend.key = element_rect(fill = "white",color = "white"),
plot.background = element_rect(fill = "white"),
legend.position="top",
axis.title.y = element_text(vjust = 0.1,margin=margin(0,10,0,0)),
axis.title.x = element_text(vjust = 0.5),
text = element_text(size = 25,family="serif"))
ggplot(gfit2,aes(x=x,y=y))+geom_point()+
stat_smooth(formula=y ~ poly(x, 2),se = TRUE,method = "lm")+
theme_bw()+
theme(legend.background = element_rect(fill="white"),
legend.key = element_rect(fill = "white",color = "white"),
plot.background = element_rect(fill = "white"),
legend.position="top",
axis.title.y = element_text(vjust = 0.1,margin=margin(0,10,0,0)),
axis.title.x = element_text(vjust = 0.5),
text = element_text(size = 25,family="serif"))+xlab("Observed")+
ylab("Predicted")
spirographR <- function(
A.RADIUS=1,
B.RADIUS=-4,
BC=-2,
A.REV=4,
N.PER.A.REV=360,
A.CEN=list(x=0, y=0)){
B.CEN.START <- list(x=0, y=A.CEN$y + A.RADIUS + B.RADIUS) #starting position of B circle
A.ANGLE <- seq(0, 2*pi*A.REV,, A.REV*N.PER.A.REV) #Radians around A for calculation
A.CIR <- 2*pi*A.RADIUS #Circumference of A
B.CIR <- 2*pi*B.RADIUS #Circumference of B
###Find position of B.CEN
B.CEN <- c()
HYP <- A.RADIUS + B.RADIUS
ADJ <- sin(A.ANGLE) * HYP
OPP <- cos(A.ANGLE) * HYP
B.CEN$x <- A.CEN$x + ADJ
B.CEN$y <- A.CEN$y + OPP
###Find position of C.POINT
C.POINT <- c()
A.CIR.DIST <- A.CIR * A.ANGLE / (2*pi)
B.POINT.ANGLE <- A.CIR.DIST / B.CIR * 2*pi
HYP <- BC
ADJ <- sin(B.POINT.ANGLE) * HYP
OPP <- cos(B.POINT.ANGLE) * HYP
C.POINT$x <- B.CEN$x + ADJ
C.POINT$y <- B.CEN$y + OPP
###Return trajectory of C
C.POINT
}
require(spatstat)
RES <- vector(mode="list", 100)
LIM <- c()
set.seed(1112)
for(i in seq(RES)){
#i=1
a.rad=sample(seq(1,10, 0.1),1)
b.rad=sample(seq(-3,10, 0.1),1)
bc=sample(seq(-10,10),1)
a.rev=least.common.multiple(abs(a.rad), abs(b.rad))
tmp <- runif(2, min=-100, max=100)
a.cen=list(x=tmp[1], y=tmp[2])
LIM <- range(c(LIM, unlist(a.cen)))
RES[[i]] <- spirographR(A.RADIUS=a.rad, B.RADIUS=b.rad, BC=bc, A.REV=a.rev, A.CEN=a.cen)
}
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), 0.8), lwd=0.3)
}
par(mar=c(0,0,0,0), bg=1)
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), 0.8), lwd=0.3)
}
RES
plot(RES[[1]])
plot(RES[[2]])
plot(RES[[1]])
plot(RES[[4]])
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), 0.8), lwd=0.3)
}
par(mar=c(0,0,0,0), bg=1)
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), 0.8), lwd=0.3)
}
sample(seq(1,10, 0.1),1)
for(i in seq(RES)){
#i=1
a.rad=sample(seq(1,15, 0.1),1)
b.rad=sample(seq(-3,15, 0.1),1)
bc=sample(seq(-10,10),1)
a.rev=least.common.multiple(abs(a.rad), abs(b.rad))
tmp <- runif(2, min=-100, max=100)
a.cen=list(x=tmp[1], y=tmp[2])
LIM <- range(c(LIM, unlist(a.cen)))
RES[[i]] <- spirographR(A.RADIUS=a.rad, B.RADIUS=b.rad, BC=bc, A.REV=a.rev, A.CEN=a.cen)
}
plot(RES[[4]])
par(mar=c(0,0,0,0), bg=1)
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), 0.8), lwd=0.3)
}
rgb(runif(1), runif(1), runif(1), 0.8)
runif(1)
rgb(runif(1), runif(1), runif(1), 0.8)
par(mar=c(0,0,0,0), bg=1)
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), runif(1)), lwd=0.3)
}
par(mar=c(0,0,0,0), bg=1)
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), runif(1)), lwd=0.3)
}
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), runif(1)), lwd=0.5)
}
par(mar=c(0,0,0,0), bg="gray")
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), runif(1)), lwd=0.5)
}
par(mar=c(0,0,0,0), bg="gray10")
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), runif(1)), lwd=0.5)
}
par(mar=c(0,0,0,0), bg="white")
for(i in seq(RES)){
if(i == 1){
plot(RES[[i]], t="n", xlim=LIM, ylim=LIM, asp=1)
}
lines(RES[[i]], col=rgb(runif(1), runif(1), runif(1), runif(1)), lwd=0.5)
}
A.ANGLE
seq(0, 2*pi*A.REV,, A.REV*N.PER.A.REV)
A.RADIUS=1,
B.RADIUS=-4,
BC=-2,
A.REV=4,
N.PER.A.REV=360,
A.CEN=list(x=0, y=0)){
B.CEN.START <- list(x=0, y=A.CEN$y + A.RADIUS + B.RADIUS) #starting position of B circle
A.ANGLE <- seq(0, 2*pi*A.REV,, A.REV*N.PER.A.REV)
seq(0, 2*pi*A.REV,, A.REV*N.PER.A.REV)
A.RADIUS=1,
B.RADIUS=-4,
BC=-2,
A.REV=4,
N.PER.A.REV=360
A.RADIUS=1,
B.RADIUS=-4,
BC=-2,
A.REV=4,
N.PER.A.REV=360
A.RADIUS=1
B.RADIUS=-
BC=-2
A.REV=4
N.PER.A.REV=360
seq(0, 2*pi*A.REV,, A.REV*N.PER.A.REV)
seq(0, 2*pi*A.REV, A.REV*360)
seq(0, 2*pi*A.REV, ,A.REV*360)
spirographR<-function(R=1,r=-4,rev=4,a=-2){
theta <-seq(0, 2*pi*rev, ,rev*360)
xt =  (R-r)*cos(theta)+d*cos((R-r)/r*theta)
yt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
zt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(xt,yt,zt))
}
spirographR()
spirographR<-function(R=1,r=-4,rev=4,a=-2,d=1){
theta <-seq(0, 2*pi*rev, ,rev*360)
xt =  (R-r)*cos(theta)+d*cos((R-r)/r*theta)
yt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
zt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(xt,yt,zt))
}
spirographR()
L<-spirographR)
L<-spirographR()
L
plot(L$xt,L$yt)
plot(L$xt,L$yt,type=;)
plot(L$xt,L$yt,type="l")
L<-spirographR(R=2,r=-2,rev=5,a=-3,d=3)
plot(L$xt,L$yt,type="l")
plot(L$xt,L$zt,type="l")
spirographR<-function(R=4,r=1.8,rev=4,a=-2,d=1.2){
theta <-seq(0, 2*pi*rev, ,rev*360)
xt =  (R-r)*cos(theta)+d*cos((R-r)/r*theta)
yt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
zt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(xt,yt,zt))
}
plot(L$xt,L$yt,type="l")
spirographR<-function(R=4,r=1.8,rev=4,a=-2,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
xt =  (R-r)*cos(theta)+d*cos((R-r)/r*theta)
yt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
zt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(xt,yt,zt))
}
spirographR()
L<-spirographR()
plot(L$xt,L$yt)
plot(L$xt,L$yt,type="l")
spirographR<-function(R=4,r=1.8,rev=4,a=-2,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
xt =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
yt =  R*sin(theta)-d*sin(theta*(R-r)/r)
#yt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
#zt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(xt,yt))
}
L<-spirographR()
plot(L$xt,L$yt,type="l")
spirographR<-function(R=4,r=1.8,rev=10,a=-2,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
xt =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
yt =  R*sin(theta)-d*sin(theta*(R-r)/r)
#yt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
#zt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(xt,yt))
}
L<-spirographR()
plot(L$xt,L$yt,type="l")
spirograph3D<-function(R=4,r=1.8,rev=10,a=2,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
xt =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
yt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
zt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(xt,yt,zt))
}
spirograph3D<-function(R=4,r=1.8,rev=10,a=2,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
xt =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
yt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
zt =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(xt,yt,zt))
}
dat<-spirograph3D()
spirograph3D<-function(R=4,r=1.8,rev=10,a=2,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
x =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
y =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
z =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(xt,yt,zt))
}
dat<-spirograph3D()
library(plotly)
plot_ly(x=dat$x, y=dat$y, z=dat$z,type = "scatter3d",mode="lines")
spirograph3D<-function(R=4,r=1.8,rev=10,a=2,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
x =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
y =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
z =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(x,y,z))
}
dat<-spirograph3D()
library(plotly)
plot_ly(x=dat$x, y=dat$y, z=dat$z,type = "scatter3d",mode="lines")
spirograph3D<-function(R=4,r=1.8,rev=10,a=0,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
x =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
y =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
z =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(x,y,z))
}
dat<-spirograph3D()
library(plotly)
plot_ly(x=dat$x, y=dat$y, z=dat$z,type = "scatter3d",mode="lines")
scatter3D(dat$x, dat$y, dat$z,phi=15,theta=10,type = "l",
bty = "b", cex = 5, colkey = FALSE,box=F,alpha=0.8)
dat$x
dat$y
dat$z
spirograph3D<-function(R=4,r=1.8,rev=10,a=1,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
x =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
y =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
z =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(x,y,z))
}
dat<-spirograph3D()
scatter3D(dat$x, dat$y, dat$z,phi=15,theta=10,type = "l",
bty = "b", cex = 5, colkey = FALSE,box=F,alpha=0.8)
spirograph3D<-function(R=4,r=1.8,rev=10,a=0.1,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
x =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
y =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
z =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(x,y,z))
}
dat<-spirograph3D()
scatter3D(dat$x, dat$y, dat$z,phi=15,theta=10,type = "l",
bty = "b", cex = 5, colkey = FALSE,box=F,alpha=0.8)
spirograph3D<-function(R=4,r=1.8,rev=10,a=0,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
x =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
y =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
z =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(x,y,z))
}
dat<-spirograph3D()
scatter3D(dat$x, dat$y, dat$z,phi=15,theta=10,type = "l",
bty = "b", cex = 5, colkey = FALSE,box=F,alpha=0.8)
dat
scatter3D(dat$x, dat$y, dat$z,type = "l",
bty = "b", cex = 5, colkey = FALSE,box=F,alpha=0.8)
spirograph3D<-function(R=4,r=1.8,rev=30,a=0,d=1.2){
theta <-seq(0, 2*pi*rev,0.1)
x =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
y =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
z =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(x,y,z))
}
dat<-spirograph3D()
scatter3D(dat$x, dat$y, dat$z,type = "l",
bty = "b", cex = 5, colkey = FALSE,box=F,alpha=0.8)
library(plotly)
plot_ly(x=dat$x, y=dat$y, z=dat$z,type = "scatter3d",mode="lines")
spirograph3D<-function(R=4,r=1.5,rev=30,a=0,d=1.72){
theta <-seq(0, 2*pi*rev,0.1)
x =  (R-r)*cos(theta)+d*cos(theta*(R-r)/r)
y =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*cos(a*theta)
z =  ((R-r)*sin(theta)-d*sin((R-r)/r*theta))*sin(a*theta)
return(data.frame(x,y,z))
}
dat<-spirograph3D()
scatter3D(dat$x, dat$y, dat$z,type = "l",
bty = "b", cex = 5, colkey = FALSE,box=F,alpha=0.8)
library(plotly)
plot_ly(x=dat$x, y=dat$y, z=dat$z,type = "scatter3d",mode="lines")
