)
filled.contour(d2,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
diff12$z = d2$z - d1$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12
diff12$z
d2$z
d2$z-d1$z
range(d2$z)
range(d1$z)
range(d2$z-d1$z)
diff12 <- d2
diff12$z = d1$z - d2$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12 <- d1
diff12$z = d1$z - d2$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
d1 = kde2d(CLUST$data[CLUST$classification==1,1], CLUST$data[CLUST$classification==1,2], lims=c(xrng, yrng), n=200)
d2 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=200)
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d2,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12 <- d1
diff12$z = d1$z - d2$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
group1<-data.frame(CLUST$data[CLUST$classification==1,1], CLUST$data[CLUST$classification==1,2],CLUST$z[CLUST$classification==1,1])
group1
group1[1,]
group1<-data.frame(x=CLUST$data[CLUST$classification==1,1],y= CLUST$data[CLUST$classification==1,2],p=CLUST$z[CLUST$classification==1,1])
group1$p
range(group1$p)
hist(group1$p)
wich(group1$p<=0.5)
which(group1$p<=0.5)
1-0.95
CLUST$z
CLUST$z[,1]<0.1
CLUST$z[,1]<0.1 & CLUST$z[,2]<0.1 & CLUST$z[,3]<0.1
summary(CLUST$z[,1]<0.1 & CLUST$z[,2]<0.1 & CLUST$z[,3]<0.1)
summary(CLUST$z[,1]<0.2 & CLUST$z[,2]<0.2 & CLUST$z[,3]<0.2)
summary(CLUST$z[,1]<0.5 & CLUST$z[,2]<0.5 & CLUST$z[,3]<0.5)
d1 = kde2d(CLUST$data[CLUST$classification==1,1], CLUST$data[CLUST$classification==1,2], lims=c(xrng, yrng), n=200,
h = rep(0.1, 2))
d2 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=200,
h = rep(0.1, 2))
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d2,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12 <- d1
diff12$z = d1$z - d2$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
d1 = kde2d(CLUST$data[CLUST$classification==1,1], CLUST$data[CLUST$classification==1,2], lims=c(xrng, yrng), n=200,
h = rep(0.5, 2))
d2 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=200,
h = rep(0.05, 2))
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d2,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12 <- d1
diff12$z = d1$z - d2$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
d1 = kde2d(CLUST$data[CLUST$classification==1,1], CLUST$data[CLUST$classification==1,2], lims=c(xrng, yrng), n=200,
h = rep(0.05, 2))
d2 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=200,
h = rep(0.05, 2))
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d2,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12 <- d1
diff12$z = d1$z - d2$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12 <- d2
diff12$z = d2$z - d1$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12$z = d2$z
d1 = kde2d(CLUST$data[CLUST$classification==1,1], CLUST$data[CLUST$classification==1,2], lims=c(xrng, yrng), n=400,
h = rep(0.05, 2))
d2 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=400,
h = rep(0.05, 2))
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d2,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12 <- d2
diff12$z = d2$z - d1$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
d1 = kde2d(CLUST$data[CLUST$classification==1,1], CLUST$data[CLUST$classification==1,2], lims=c(xrng, yrng), n=100,
h = rep(0.1, 2))
d2 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=100,
h = rep(0.15, 2))
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d2,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12 <- d2
diff12$z = d2$z - d1$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
rownames(diff12$z) = diff12$x
colnames(diff12$z) = diff12$y
# Now melt it to long format
diff12.m = melt(diff12$z, id.var=rownames(diff12))
names(diff12.m) = c("x","y","z")
plot(diff12.m$z)
plot(diff12.m$z)
hist(diff12.m$z)
plot(density(diff12.m$z))
density(diff12.m$z)
range(diff12.m$z)
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
CLUST$uncertainty
dim(CLUST$uncertainty)
range(CLUST$uncertainty)
hist(CLUST$uncertainty)
summary(which(CLUST$uncertainty>0.1))
summary(CLUST$uncertainty>0.1)
summary(CLUST$uncertainty>0.5)
summary(CLUST$uncertainty>0.6)
gdata <- data.frame(x=AGN_short$xx_BPT,y=AGN_short$yy_BPT,z=AGN_short$yy_WHAN, type=as.factor(CLUST$classification),
uncertainty = log(CLUST$uncertainty,10) )
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type,alpha=uncertainty),size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
log(CLUST$uncertainty,10)
CLUST$uncertainty
asinh(CLUST$uncertainty)
CLUST$uncertainty/max(CLUST$uncertainty)
log(CLUST$uncertainty)/max(log(CLUST$uncertainty))
log(CLUST$uncertainty,10)
CLUST$uncertainty
range(CLUST$uncertainty)
gdata <- data.frame(x=AGN_short$xx_BPT,y=AGN_short$yy_BPT,z=AGN_short$yy_WHAN, type=as.factor(CLUST$classification),
uncertainty = CLUST$uncertainty )
#-----------------------
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type,alpha=uncertainty),size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type,size=uncertainty),size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
irisModel3 <-  Mclust(iris[,-5], G = 3)
uncerPlot(z = irisModel3$z)
CLUST$uncertainty>1-0.68
summarr(CLUST$uncertainty>1-0.68)
summary(CLUST$uncertainty>1-0.68)
summary(CLUST$uncertainty<1-0.68)
max(CLUST$uncertainty)
summary(CLUST$uncertainty>0.1)
group1<-data.frame(x=CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.5,1],y= CLUST$data[CLUST$classification==1,2],p=CLUST$z[CLUST$classification==1,1])
d1 = kde2d(CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.5,1],
CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.5,2], lims=c(xrng, yrng), n=100,
h = rep(0.1, 2))
d2 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=100,
h = rep(0.15, 2))
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d2,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
d1 = kde2d(CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.4,1],
CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.4,2], lims=c(xrng, yrng), n=100,
h = rep(0.1, 2))
d2 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=100,
h = rep(0.15, 2))
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
d1 = kde2d(CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,1],
CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,2], lims=c(xrng, yrng), n=100,
h = rep(0.1, 2))
d2 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=100,
h = rep(0.15, 2))
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d2,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12 <- d2
diff12$z = d2$z - d1$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
d0 = kde2d(CLUST$data[CLUST$uncertainty < 0.3,1],
CLUST$data[CLUST$uncertainty < 0.3,2], lims=c(xrng, yrng), n=100,
h = rep(0.1, 2))
filled.contour(d0,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d1,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
d2 = kde2d(CLUST$data[CLUST$classification==2 & CLUST$uncertainty < 0.3,1],
CLUST$data[CLUST$classification==2 & CLUST$uncertainty < 0.3,2], lims=c(xrng, yrng), n=100,
h = rep(0.1, 2))
d3 = kde2d(CLUST$data[CLUST$classification==3 & CLUST$uncertainty < 0.3,1],
CLUST$data[CLUST$classification==3 & CLUST$uncertainty < 0.3,2], lims=c(xrng, yrng), n=100,
h = rep(0.1, 2))
d0 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=100,
h = rep(0.15, 2))
filled.contour(d2,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d3,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')))
filled.contour(d0,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
diff12 <- d0
diff12$z = d0$z - d1$z- d2$z- d3$z
filled.contour(diff12,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
filled.contour(d0,
color.palette=colorRampPalette(c('white','blue','yellow','red','darkred'))
)
d0$z
range(d0$z)
range(d1$z)
range(d2$z)
range(d3$z)
d0 = kde2d(gdata$x, gdata$y, lims=c(xrng, yrng), n=100,
h = rep(0.1, 2))
range(d0$z)
install.packages("KernSmooth")
est <- bkde2D(CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,1],
CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,2], lims=c(xrng, yrng), n=100, bandwidth=c(0.1, 0.1))
require(KernSmooth)
est <- bkde2D(CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,1],
CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,2], lims=c(xrng, yrng), n=100, bandwidth=c(0.1, 0.1))
est <- bkde2D(CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,1],
CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,2], range.x=c(xrng, yrng), n=100, bandwidth=c(0.1, 0.1))
est <- bkde2D(CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,1],
CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,2], range.x=c(xrng, yrng),  bandwidth=c(0.1, 0.1))
xx<-matrix(CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,1],
CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,2])
xx<-data.frame(CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,1],
CLUST$data[CLUST$classification==1 & CLUST$uncertainty < 0.3,2])
est <- bkde2D(xx, range.x=c(xrng, yrng),  bandwidth=c(0.1, 0.1))
xx
bkde2D(xx, range.x=c(xrng, yrng),  bandwidth=c(0.1, 0.1))
is.na(xx)
summary(is.na(xx))
bkde2D(xx, range.x=c(xrng, yrng),  bandwidth=c(0.1, 0.1),gridsize=c(100,100))
est <- bkde2D(as.matrix(xx), range.x=c(xrng, yrng),  bandwidth=c(0.1, 0.1),gridsize=c(100,100))
data(diabetes)
mod = Mclust(diabetes[,-1])
summary(mod)
dr = MclustDR(mod)
summary(dr)
plot(dr, what = "scatterplot")
plot(dr, what = "evalues")
data(banknote)
da = MclustDA(banknote[,2:7], banknote$Status, modelType = "EDDA")
dr = MclustDR(da)
summary(dr)
da = MclustDA(banknote[,2:7], banknote$Status)
dr = MclustDR(da)
summary(dr)
mod
MclustDR(mod)
plot(dr, what = "scatterplot")
plot(dr, what = "evalues")
dr$M.I
dr$x
dr$mu
predict(dr)
r
dr
mod
plost(dr$class2mixcomp)
plot(dr$class2mixcomp)
plot(dr)
dr = MclustDR(CLUST)
plot(dr)
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
CLUST <- Mclust(AGN_short,G = 4,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV",noise = T)#Initialization with 1000 for higher speed
#--Get Ellipse info----------------------------------------------------------------#
source("gg_ellipse.R")
EL<-df.ellipses(CLUST,level=0.997)
El_BPT<-subset(EL,xvar=="yy_BPT" & yvar=="xx_BPT")
El_BPT$classification <-as.factor(El_BPT$classification)
El_WHAN<-subset(EL,xvar=="yy_WHAN" & yvar=="xx_BPT")
El_WHAN$classification <-as.factor(El_WHAN$classification)
#----------------------------------------------------------------##----------------------------------------------------------------#
# Customized plots via ggplot2
gdata <- data.frame(x=AGN_short$xx_BPT,y=AGN_short$yy_BPT,z=AGN_short$yy_WHAN, type=as.factor(CLUST$classification),
uncertainty = CLUST$uncertainty )
#-----------------------
# BPT PLOT
#-----------------------
xx = seq(-4, 0.0, 0.01)
Ka = 0.61 / (xx - 0.05) + 1.30
gKa <- data.frame(xx,Ka)
#-----------------------
xx1 = seq(-4, 0.4, 0.01)
Ke = 0.61 / (xx1 - 0.47) + 1.19
gKe <- data.frame(xx1,Ke)
#-----------------------
xx2 = seq(-0.43, 5, 0.01)
Sey = 1.05 * xx2 + 0.45
gSey <- data.frame(xx2,Sey)
# BPT projection
ggplot(data=gdata,aes(x=x,y=y))+
xlab(expression(paste('log ([NII]/H', alpha, ')'))) +
ylab(expression(paste('log ([OIII]/H', beta, ')'))) +
#  stat_ellipse(type="norm",geom = "polygon", alpha = 1/2,aes(group=type,fill=type),level = 0.997)+
geom_point(aes(color=type),size=0.25)+
scale_colour_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
scale_fill_manual(values = c("#66c2a5","#fc8d62","#8da0cb","#e78ac3"))+
geom_path(data=El_BPT,aes(x=xval,y=yval,group=classification,color=classification),size=1)+
theme_bw() +
geom_line(aes(x=xx,y=Ka),data=gKa,size=1.25,linetype="dashed",color="gray25")+
geom_line(aes(x=xx1,y=Ke),data=gKe,size=1.25,linetype="dotted",color="gray25")+
geom_line(aes(x=xx2,y=Sey),data=gSey,size=0.75,linetype="dotdash",color="gray25")+
coord_cartesian(xlim=c(-1.7,1.3),ylim=c(-1.4,1.5))+
theme(legend.position = "none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))
CLUST <- Mclust(AGN_short,G = 4,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
#--Get Ellipse info----------------------------------------------------------------#
source("gg_ellipse.R")
EL<-df.ellipses(CLUST,level=0.997)
df.ellipses(CLUST,level=0.997)
CLUST <- Mclust(AGN_short,G = 3,initialization=list(subset=sample(1:nrow(AGN_short), size=1000)),
modelName = "VVV")#Initialization with 1000 for higher speed
#--Get Ellipse info----------------------------------------------------------------#
source("gg_ellipse.R")
EL<-df.ellipses(CLUST,level=0.997)
source("gg_ellipse.R")
df.ellipses(CLUST,level=0.997)
CLUST
df.ellipses(CLUST,level=0.997)
require(ellipse)
require(plyr)
# Charlotte Wickhams function to generate ellipse coordinates
get.ellipses <- function(coords, mclust.fit,level=0.95){
centers <- mclust.fit$parameters$mean[coords, ]
vars <- mclust.fit$parameters$variance$sigma[coords, coords, ]
ldply(1:ncol(centers), function(cluster){
data.frame(ellipse(vars[,,cluster], centre = centers[, cluster],
level = level), classification = cluster)
})
}
# Function to generate data frame for producing ellipses (DM)
df.ellipses <- function(mclustobj,level=0.95){
nms <- rownames(mclustobj$parameters$mean)
n <- length(nms)
grid <- expand.grid(x = 1:n, y = 1:n)
grid <- subset(grid, x < y)
grid <- cbind(grid[, 2], grid[, 1])
ldply(1:nrow(grid), function(i){
coords <- as.numeric(grid[i, ])
ell <- get.ellipses(c(nms[coords]), mclustobj,level=level)
names(ell) <- c('yval', 'xval', 'classification')
data.frame(xvar = nms[coords[1]], yvar = nms[coords[2]], ell)
})
}
df.ellipses(CLUST,level=0.997)
rownames(CLUST$parameters$mean)
mclustobj<-CLUST
nms <- rownames(mclustobj$parameters$mean)
n <- length(nms)
grid <- expand.grid(x = 1:n, y = 1:n)
grid <- subset(grid, x < y)
grid <- cbind(grid[, 2], grid[, 1])
ldply(1:nrow(grid), function(i){
coords <- as.numeric(grid[i, ])
ell <- get.ellipses(c(nms[coords]), mclustobj,level=level)
names(ell) <- c('yval', 'xval', 'classification')
data.frame(xvar = nms[coords[1]], yvar = nms[coords[2]], ell)
})
data.frame(xvar = nms[coords[1]], yvar = nms[coords[2]], ell)
grid <- expand.grid(x = 1:n, y = 1:n)
grid <- subset(grid, x < y)
grid <- cbind(grid[, 2], grid[, 1])
ldply(1:nrow(grid), function(i){
coords <- as.numeric(grid[i, ])
ell <- get.ellipses(c(nms[coords]), mclustobj,level=level)
names(ell) <- c('yval', 'xval', 'classification')
data.frame(xvar = nms[coords[1]], yvar = nms[coords[2]], ell)
}
)
coords <- as.numeric(grid[i, ])
nrow(grid)
as.numeric(grid[1, ])
get.ellipses(c(nms[coords]), mclustobj,level=level)
get.ellipses <- function(coords, mclust.fit,level=0.95){
centers <- mclust.fit$parameters$mean[coords, ]
vars <- mclust.fit$parameters$variance$sigma[coords, coords, ]
ldply(1:ncol(centers), function(cluster){
data.frame(ellipse(vars[,,cluster], centre = centers[, cluster],
level = level), classification = cluster)
})
}
centers <- mclust.fit$parameters$mean[coords, ]
mclust.fit<-CLUST
centers <- mclust.fit$parameters$mean[coords, ]
mclust.fit$parameters$mean[coords, ]
vars <- mclust.fit$parameters$variance$sigma[coords, coords, ]
mclust.fit$parameters$variance$sigma
mclust.fit$parameters$variance$sigma[coords,coords,]
